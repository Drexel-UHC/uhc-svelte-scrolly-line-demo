{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "BarChart.svelte",
    "ColumnChart.svelte",
    "LineChart.svelte",
    "ScatterChart.svelte",
    "AxisX.svelte",
    "AxisY.svelte",
    "Footer.svelte",
    "Labels.svelte",
    "Legend.svelte",
    "Line.svelte",
    "Title.svelte",
    "Voronoi.svelte",
    "LayerCake.svelte",
    "Html.svelte",
    "ScaledSvg.svelte",
    "Svg.svelte",
    "App.svelte",
    "Divider.svelte",
    "Filler.svelte",
    "Header.svelte",
    "Media.svelte",
    "Scroller.svelte",
    "UHCFooter.svelte",
    "UHCHeader.svelte",
    "Arrow.svelte",
    "Toggle.svelte"
  ],
  "sourcesContent": [
    "<svelte:options accessors={true} />\r\n\r\n<script>\r\n\timport { LayerCake, Svg } from 'layercake';\r\n\timport { scaleBand, scaleOrdinal, scaleLinear, scaleSymlog } from 'd3-scale';\r\n  import { tweened } from 'svelte/motion';\r\n\timport { cubicInOut } from 'svelte/easing';\r\n\timport { groupData, stackData } from '../js/utils';\r\n\r\n\timport SetCoords from './shared/SetCoords.svelte';\r\n\timport Bar from './shared/Bar.svelte';\r\n\timport AxisX from './shared/AxisX.svelte';\r\n\timport AxisY from './shared/AxisY.svelte';\r\n\timport Legend from './shared/Legend.svelte';\r\n\timport Title from './shared/Title.svelte';\r\n\timport Footer from './shared/Footer.svelte';\r\n\r\n  export let data;\r\n\texport let height = 250; // number of pixels or valid css height string\r\n  export let animation = true;\r\n  export let duration = 800;\r\n\texport let xKey = 'x';\r\n\texport let yKey = 'y';\r\n\texport let zKey = null;\r\n\texport let idKey = yKey;\r\n\texport let xScale = 'linear';\r\n\texport let xFormatTick = d => d;\r\n\texport let xMax = null;\r\n\texport let xMin = 0;\r\n  export let xAxis = true;\r\n  export let yAxis = true;\r\n\texport let xTicks = 4;\r\n\texport let textColor = '#666';\r\n\texport let tickColor = '#ccc';\r\n\texport let tickDashed = false;\r\n\texport let title = null;\r\n\texport let footer = null;\r\n\texport let legend = false;\r\n\texport let snapTicks = false;\r\n\texport let mode = 'default'; // options: 'default', 'comparison', 'marker', 'stacked', 'grouped'\r\n\texport let padding = { top: 0, bottom: 20, left: 35, right: 0 };\r\n\texport let color = null;\r\n\texport let colors = color ? [color] : ['#206095', '#A8BD3A', '#003C57', '#27A0CC', '#118C7B', '#F66068', '#746CB1', '#22D0B6', 'lightgrey'];\r\n\texport let markerWidth = 2.5;\r\n\texport let spacing = 0.05; // proportion of bar width (1 = 100%)\r\n\texport let interactive = true;\r\n\texport let xPrefix = \"\";\r\n\texport let xSuffix = \"\";\r\n\texport let yPrefix = \"\";\r\n\texport let ySuffix = \"\";\r\n\texport let hover = false;\r\n\texport let hovered = null;\r\n\texport let colorHover = 'orange';\r\n\texport let select = false;\r\n\texport let selected = null;\r\n\texport let colorSelect = 'black';\r\n\texport let highlighted = [];\r\n\texport let colorHighlight = 'black';\r\n\texport let overlayFill = false;\r\n\r\n\tconst tweenOptions = {\r\n\t\tduration: duration,\r\n\t\teasing: cubicInOut\r\n\t};\r\n\tconst coords = tweened(undefined, tweenOptions);\r\n\r\n\tconst distinct = (d, i, arr) => arr.indexOf(d) ==  i;\r\n\r\n\tfunction getTotals(data, keys) {\r\n\t\tlet arr = [];\r\n\t\tkeys.forEach(key => {\r\n\t\t\tlet vals = data.filter(d => d[yKey] == key).map(d => d[xKey]);\r\n\t\t\tlet sum = vals.reduce((a, b) => a + b, 0);\r\n\t\t\tarr.push(sum);\r\n\t\t});\r\n\t\treturn arr;\r\n\t}\r\n\r\n\t// Functions to update xDomain\r\n\tconst xDomSet = (data, mode, xKey, xMax) => xMax ? [xMin, xMax] : mode == 'stacked' && zKey ? [xMin, Math.max(...getTotals(data, data.map(d => d[yKey]).filter(distinct)))] : [xMin, Math.max(...data.map(d => d[xKey]))];\r\n\tfunction xDomUpdate(data, mode, xKey, xMax) {\r\n\t\tlet newXDom = xDomSet(data, mode, xKey, xMax);\r\n\t\tif (newXDom[0] != xDom[0] || newXDom[1] != xDom[1]) {\r\n\t\t\txDomain.set(newXDom, {duration: animation ? duration : 0});\r\n\t\t\txDom = newXDom;\r\n\t\t}\r\n\t}\r\n\tlet xDom = xDomSet(data, mode, xKey, xMax);\r\n\tconst xDomain = tweened(xDom, tweenOptions);\r\n\t$: xDomUpdate(data, mode, xKey, xMax);\r\n\r\n\t// Functions to update yDomain & zDomain\r\n\t$: yDomain = data.map(d => d[yKey]).filter(distinct);\r\n\t$: zDomain = zKey ? data.map(d => d[zKey]).filter(distinct) : null;\r\n\r\n\t// Create a data series for each zKey (group)\r\n\t$: groupedData = mode == 'stacked' ? stackData(data, zDomain, xKey, zKey) : groupData(data, zDomain, zKey);\r\n</script>\r\n\r\n{#if title}\r\n  <Title>{title}</Title>\r\n{/if}\r\n<slot name=\"options\"/>\r\n<div class=\"chart-container\" style=\"height: {typeof height == 'number' ? height + 'px' : height }\">\r\n\t<LayerCake\r\n\t\t{padding}\r\n\t\tx={xKey}\r\n\t\ty={yKey}\r\n\t\tz={zKey}\r\n\t\txDomain={$xDomain}\r\n\t\t{yDomain}\r\n\t\txScale={xScale == 'log' ? scaleSymlog() : scaleLinear()}\r\n\t\tyScale={scaleBand().paddingInner([spacing]).round(true)}\r\n\t\tzScale={scaleOrdinal()}\r\n\t\t{zDomain}\r\n\t\tzRange={colors}\r\n\t\tdata={groupedData}\r\n\t\tflatData={data}\r\n\t\tcustom={{\r\n\t\t\ttype: 'bar',\r\n\t\t\tmode,\r\n\t\t\tidKey,\r\n      coords,\r\n\t\t\tmarkerWidth,\r\n\t\t\tcolorSelect,\r\n\t\t\tcolorHover,\r\n\t\t\tcolorHighlight,\r\n      animation,\r\n      duration\r\n    }}\r\n\t\tlet:width\r\n\t>\r\n\t  {#if width > 80} <!-- Hack to prevent rendering before xRange/yRange initialised -->\r\n\t  <SetCoords/>\r\n\t  <slot name=\"back\"/>\r\n\t\t<Svg pointerEvents={interactive}>\r\n      {#if xAxis}\r\n\t\t\t  <AxisX ticks={xTicks} formatTick={xFormatTick} {snapTicks} prefix={xPrefix} suffix={xSuffix} {textColor} {tickColor} {tickDashed}/>\r\n      {/if}\r\n      {#if yAxis}\r\n\t\t\t  <AxisY gridlines={false} prefix={yPrefix} suffix={ySuffix} {textColor} {tickColor} {tickDashed}/>\r\n      {/if}\r\n\t\t\t<Bar {select} {selected} {hover} {hovered} {highlighted} on:hover on:select {overlayFill}/>\r\n\t\t\t<slot name=\"svg\"/>\r\n\t\t</Svg>\r\n\t  <slot name=\"front\"/>\r\n\t\t{/if}\r\n\t</LayerCake>\r\n</div>\r\n{#if legend && zDomain}\r\n  <Legend domain={zDomain} {colors} {markerWidth} horizontal={false} line={mode == 'barcode'} comparison={mode == 'comparison'}/>\r\n{/if}\r\n{#if footer}\r\n  <Footer>{footer}</Footer>\r\n{/if}\r\n\r\n<style>\r\n\t.chart-container {\r\n\t\twidth: 100%;\r\n\t}\r\n</style>",
    "<svelte:options accessors={true} />\r\n\r\n<script>\r\n\timport { LayerCake, Svg } from 'layercake';\r\n\timport { scaleBand, scaleOrdinal, scaleLinear, scaleSymlog } from 'd3-scale';\r\n  import { tweened } from 'svelte/motion';\r\n\timport { cubicInOut } from 'svelte/easing';\r\n\timport { groupData, stackData } from '../js/utils';\r\n\r\n\timport SetCoords from './shared/SetCoords.svelte';\r\n\timport Column from './shared/Column.svelte';\r\n\timport AxisX from './shared/AxisX.svelte';\r\n\timport AxisY from './shared/AxisY.svelte';\r\n\timport Legend from './shared/Legend.svelte';\r\n\timport Title from './shared/Title.svelte';\r\n\timport Footer from './shared/Footer.svelte';\r\n\r\n  export let data;\r\n\texport let height = 250; // number of pixels or valid css height string\r\n  export let animation = true;\r\n  export let duration = 800;\r\n\texport let xKey = 'x';\r\n\texport let yKey = 'y';\r\n\texport let zKey = null;\r\n\texport let idKey = xKey;\r\n\texport let yScale = 'linear';\r\n\texport let yFormatTick = d => d;\r\n\texport let yMax = null;\r\n\texport let yMin = 0;\r\n  export let xAxis = true;\r\n  export let yAxis = true;\r\n\texport let yTicks = 4;\r\n\texport let title = null;\r\n\texport let footer = null;\r\n\texport let legend = false;\r\n\texport let mode = 'default'; // options: 'default', 'comparison', 'marker', 'stacked', 'grouped'\r\n\texport let padding = { top: 0, bottom: 20, left: 35, right: 0 };\r\n\texport let color = null;\r\n\texport let colors = color ? [color] : ['#206095', '#A8BD3A', '#003C57', '#27A0CC', '#118C7B', '#F66068', '#746CB1', '#22D0B6', 'lightgrey'];\r\n\texport let markerWidth = 2.5\r\n\texport let spacing = 0.05 // proportion of bar width (1 = 100%)\r\n\texport let interactive = true;\r\n\texport let xPrefix = \"\";\r\n\texport let xSuffix = \"\";\r\n\texport let yPrefix = \"\";\r\n\texport let ySuffix = \"\";\r\n\texport let hover = false;\r\n\texport let hovered = null;\r\n\texport let colorHover = 'orange';\r\n\texport let select = false;\r\n\texport let selected = null;\r\n\texport let colorSelect = 'black';\r\n\texport let highlighted = [];\r\n\texport let colorHighlight = 'black';\r\n\texport let overlayFill = false;\r\n\r\n\tconst tweenOptions = {\r\n\t\tduration: duration,\r\n\t\teasing: cubicInOut\r\n\t};\r\n\tconst coords = tweened(undefined, tweenOptions);\r\n\r\n\tconst distinct = (d, i, arr) => arr.indexOf(d) ==  i;\r\n\r\n\tfunction getTotals(data, keys) {\r\n\t\tlet arr = [];\r\n\t\tkeys.forEach(key => {\r\n\t\t\tlet vals = data.filter(d => d[xKey] == key).map(d => d[yKey]);\r\n\t\t\tlet sum = vals.reduce((a, b) => a + b, 0);\r\n\t\t\tarr.push(sum);\r\n\t\t});\r\n\t\treturn arr;\r\n\t}\r\n\r\n\t// Functions to animate yDomain\r\n\tconst yDomSet = (data, mode, yKey, yMax) => yMax ? [yMin, yMax] : mode == 'stacked' && yKey ? [yMin, Math.max(...getTotals(data, data.map(d => d[xKey]).filter(distinct)))] : [yMin, Math.max(...data.map(d => d[yKey]))];\r\n\tfunction yDomUpdate(data, mode, yKey, yMax) {\r\n\t\tlet newYDom = yDomSet(data, mode, yKey, yMax);\r\n\t\tif (newYDom[0] != yDom[0] || newYDom[1] != yDom[1]) {\r\n\t\t\tyDomain.set(newYDom, {duration: animation ? duration : 0});\r\n\t\t\tyDom = newYDom;\r\n\t\t}\r\n\t}\r\n\tlet yDom = yDomSet(data, mode, yKey, yMax);\r\n\tconst yDomain = tweened(yDom, tweenOptions);\r\n\t$: yDomUpdate(data, mode, yKey, yMax);\r\n\r\n\t// Functions to update xDomain & zDomain\r\n\t$: xDomain = data.map(d => d[xKey]).filter(distinct);\r\n\t$: zDomain = zKey ? data.map(d => d[zKey]).filter(distinct) : null;\r\n\r\n\t// Create a data series for each zKey (group)\r\n\t$: groupedData = mode == 'stacked' ? stackData(data, zDomain, yKey, zKey) : groupData(data, zDomain, zKey);\r\n</script>\r\n\r\n{#if title}\r\n  <Title>{title}</Title>\r\n{/if}\r\n<slot name=\"options\"/>\r\n<div class=\"chart-container\" style=\"height: {typeof height == 'number' ? height + 'px' : height }\">\r\n\t<LayerCake\r\n\t\t{padding}\r\n\t\tx={xKey}\r\n\t\ty={yKey}\r\n\t\tz={zKey}\r\n\t\t{xDomain}\r\n\t\tyDomain={$yDomain}\r\n\t\t{zDomain}\r\n\t\txScale={scaleBand().paddingInner([spacing]).round(true)}\r\n\t\tyScale={yScale == 'log' ? scaleSymlog() : scaleLinear()}\r\n\t\tzScale={scaleOrdinal()}\r\n\t\tzRange={colors}\r\n\t\tdata={groupedData}\r\n\t\tflatData={data}\r\n\t\tcustom={{\r\n\t\t\ttype: 'column',\r\n\t\t\tmode,\r\n\t\t\tidKey,\r\n      coords,\r\n\t\t\tmarkerWidth,\r\n\t\t\tcolorSelect,\r\n\t\t\tcolorHover,\r\n\t\t\tcolorHighlight,\r\n      animation,\r\n      duration\r\n    }}\r\n\t\tlet:width\r\n\t>\r\n\t  {#if width > 80} <!-- Hack to prevent rendering before xRange/yRange initialised -->\r\n\t\t<SetCoords/>\r\n\t  <slot name=\"back\"/>\r\n\t\t<Svg pointerEvents={interactive}>\r\n      {#if xAxis}\r\n\t\t\t  <AxisX gridlines={false} prefix={xPrefix} suffix={xSuffix}/>\r\n      {/if}\r\n      {#if yAxis}\r\n\t\t\t  <AxisY ticks={yTicks} formatTick={yFormatTick} prefix={yPrefix} suffix={ySuffix}/>\r\n      {/if}\r\n\t\t\t<Column {select} {selected} {hover} {hovered} {highlighted} on:hover on:select {overlayFill}/>\r\n\t\t\t<slot name=\"svg\"/>\r\n\t\t</Svg>\r\n\t  <slot name=\"front\"/>\r\n\t\t{/if}\r\n\t</LayerCake>\r\n</div>\r\n{#if legend && zDomain}\r\n  <Legend domain={zDomain} {colors} {markerWidth} line={mode == 'barcode'} comparison={mode == 'comparison'}/>\r\n{/if}\r\n{#if footer}\r\n  <Footer>{footer}</Footer>\r\n{/if}\r\n\r\n<style>\r\n\t.chart-container {\r\n\t\twidth: 100%;\r\n\t}\r\n</style>",
    "<svelte:options accessors={true} />\r\n\r\n<script>\r\n  import { LayerCake, Svg } from 'layercake';\r\n  import { scaleOrdinal, scaleLinear, scaleSymlog } from 'd3-scale';\r\n  import { tweened } from 'svelte/motion';\r\n  import { cubicInOut } from 'svelte/easing';\r\n  import { groupData, stackData } from '../js/utils';\r\n\r\n  import SetCoords from './shared/SetCoords.svelte';\r\n  import Line from './shared/Line.svelte';\r\n  import Area from './shared/Area.svelte';\r\n  import AxisX from './shared/AxisX.svelte';\r\n  import AxisY from './shared/AxisY.svelte';\r\n  import Legend from './shared/Legend.svelte';\r\n  import Title from './shared/Title.svelte';\r\n  import Footer from './shared/Footer.svelte';\r\n  import Labels from './shared/Labels.svelte';\r\n\r\n  export let data;\r\n  export let height = 250; // number of pixels or valid css height string\r\n  export let animation = true;\r\n  export let duration = 800;\r\n  export let xKey = 'x';\r\n  export let yKey = 'y';\r\n  export let zKey = null;\r\n  export let idKey = zKey;\r\n  export let labelKey = idKey;\r\n  export let yScale = 'linear';\r\n  export let yFormatTick = (d) => d;\r\n  export let yMax = null;\r\n  export let yMin = 0;\r\n  export let xMax = null;\r\n  export let xMin = null;\r\n  export let xAxis = true;\r\n  export let yAxis = true;\r\n  export let xTicks = 4;\r\n  export let yTicks = 4;\r\n  export let title = null;\r\n  export let footer = null;\r\n  export let legend = false;\r\n  export let labels = false;\r\n  export let snapTicks = true;\r\n  export let line = true;\r\n  export let area = true;\r\n  export let mode = 'default';\r\n  export let areaOpacity = 1;\r\n  export let padding = { top: 0, bottom: 20, left: 35, right: 0 };\r\n  export let color = null;\r\n  export let colors = color\r\n    ? [color]\r\n    : [\r\n        '#206095',\r\n        '#A8BD3A',\r\n        '#003C57',\r\n        '#27A0CC',\r\n        '#118C7B',\r\n        '#F66068',\r\n        '#746CB1',\r\n        '#22D0B6',\r\n        'lightgrey',\r\n      ];\r\n  export let lineWidth = 2.5;\r\n  export let interactive = true;\r\n  export let xPrefix = '';\r\n  export let xSuffix = '';\r\n  export let yPrefix = '';\r\n  export let ySuffix = '';\r\n  export let hover = false;\r\n  export let hovered = null;\r\n  export let colorHover = 'orange';\r\n  export let select = false;\r\n  export let selected = null;\r\n  export let colorSelect = '#206095';\r\n  export let highlighted = [];\r\n  export let colorHighlight = '#206095';\r\n\r\n  // custom\r\n  export let groups_all;\r\n  export let groups_selected;\r\n  export let step;\r\n  $: {\r\n    console.log(` ******************* LineChart ${step}  `);\r\n    console.log(`xMin: ${xMin}, xMax: ${xMax}`);\r\n  }\r\n\r\n  const tweenOptions = {\r\n    duration: duration,\r\n    easing: cubicInOut,\r\n  };\r\n  const coords = tweened(undefined, tweenOptions);\r\n\r\n  const distinct = (d, i, arr) => arr.indexOf(d) == i;\r\n\r\n  function getTotals(data, keys) {\r\n    let arr = [];\r\n    keys.forEach((key) => {\r\n      let vals = data.filter((d) => d[xKey] == key).map((d) => d[yKey]);\r\n      let sum = vals.reduce((acc, curr) => acc + curr);\r\n      arr.push(sum);\r\n    });\r\n    return arr;\r\n  }\r\n  // # ============================================================================ #\r\n  // #   xDomain updates\r\n  const xDomSet = (data, mode, xKey, xMin, xMax) => {\r\n    // console.log(`xDomSet() call: xMin: ${xMin}, xMax: ${xMax}`);\r\n    const vec__all_x_values = data.map((d) => d[xKey]).filter(distinct);\r\n    const new_x_max = xMax ? xMax : Math.max(...vec__all_x_values);\r\n    const new_x_min = xMin\r\n      ? xMin\r\n      : Math.min(...data.map((d) => d[xKey]).filter(distinct));\r\n    const newXDom = [new_x_min, new_x_max];\r\n    // console.log(`newXDom`);\r\n    // console.log(newXDom);\r\n    return newXDom;\r\n  };\r\n  function xDomUpdate(data, mode, xKey, xMin, xMax) {\r\n    let newXDom = xDomSet(data, mode, xKey, xMin, xMax);\r\n    console.log(`newXDom`);\r\n    console.log(newXDom);\r\n    if (newXDom[0] != xDom[0] || newXDom[1] != xDom[1]) {\r\n      xDomain.set(newXDom, { duration: animation ? duration : 0 });\r\n      xDom = newXDom;\r\n    }\r\n  }\r\n  let xDom = xDomSet(data, mode, xKey, xMin, xMax);\r\n  const xDomain = tweened(xDom, tweenOptions);\r\n  $: xDomUpdate(data, mode, xKey, xMin, xMax);\r\n\r\n  // # ============================================================================ #\r\n  // #   yDomain updates\r\n  const yDomSet = (data, mode, yKey, yMax) =>\r\n    yMax\r\n      ? [yMin, yMax]\r\n      : mode == 'stacked' && yKey\r\n      ? [\r\n          yMin,\r\n          Math.max(\r\n            ...getTotals(data, data.map((d) => d[xKey]).filter(distinct))\r\n          ),\r\n        ]\r\n      : [yMin, Math.max(...data.map((d) => d[yKey]))];\r\n  function yDomUpdate(data, mode, yKey, yMax) {\r\n    let newYDom = yDomSet(data, mode, yKey, yMax);\r\n    console.log(`newYDom`);\r\n    console.log(newYDom);\r\n    if (newYDom[0] != yDom[0] || newYDom[1] != yDom[1]) {\r\n      yDomain.set(newYDom, { duration: animation ? duration : 0 });\r\n      yDom = newYDom;\r\n    }\r\n  }\r\n  let yDom = yDomSet(data, mode, yKey, yMax);\r\n  const yDomain = tweened(yDom, tweenOptions);\r\n  $: yDomUpdate(data, mode, yKey, yMax);\r\n\r\n  // # ============================================================================ #\r\n  // #   zDomain updates\r\n\r\n  $: zDomain = zKey ? data.map((d) => d.group).filter(distinct) : null;\r\n\r\n  // Create a data series for each zKey (group)\r\n\r\n  $: groupedData =\r\n    mode == 'stacked'\r\n      ? stackData(data, zDomain, yKey, zKey)\r\n      : groupData(data, zDomain, zKey);\r\n</script>\r\n\r\n{#if title}\r\n  <Title>{title}</Title>\r\n{/if}\r\n<slot name=\"options\" />\r\n<div\r\n  class=\"chart-container\"\r\n  style=\"height: {typeof height == 'number' ? height + 'px' : height}\"\r\n>\r\n  <LayerCake\r\n    {padding}\r\n    x={xKey}\r\n    y={yKey}\r\n    z={zKey}\r\n    xDomain={$xDomain}\r\n    yDomain={$yDomain}\r\n    yScale={yScale == 'log' ? scaleSymlog() : scaleLinear()}\r\n    zScale={scaleOrdinal()}\r\n    {zDomain}\r\n    zRange={colors}\r\n    data={groupedData}\r\n    flatData={data}\r\n    custom={{\r\n      type: 'line',\r\n      mode,\r\n      idKey,\r\n      labelKey,\r\n      coords,\r\n      colorSelect,\r\n      colorHover,\r\n      colorHighlight,\r\n      animation,\r\n      duration,\r\n      groups_all: groups_all,\r\n      groups_selected: groups_selected,\r\n      step: step,\r\n    }}\r\n    let:width\r\n  >\r\n    {#if width > 80}\r\n      <!-- Hack to prevent rendering before xRange/yRange initialised -->\r\n      <!-- <SetCoords /> -->\r\n      <slot name=\"back\" />\r\n      <Svg pointerEvents={interactive}>\r\n        {#if xAxis}\r\n          <AxisX ticks={xTicks} {snapTicks} prefix={xPrefix} suffix={xSuffix} />\r\n        {/if}\r\n        {#if yAxis}\r\n          <AxisY\r\n            ticks={yTicks}\r\n            formatTick={yFormatTick}\r\n            prefix={yPrefix}\r\n            suffix={ySuffix}\r\n          />\r\n        {/if}\r\n        {#if area}\r\n          <Area {mode} opacity={areaOpacity} />\r\n        {/if}\r\n        {#if line}\r\n          <Line\r\n            {lineWidth}\r\n            {select}\r\n            bind:selected\r\n            {hover}\r\n            bind:hovered\r\n            {highlighted}\r\n            on:hover\r\n            on:select\r\n          />\r\n        {/if}\r\n        {#if labels}\r\n          <Labels {hovered} {selected} />\r\n        {/if}\r\n        <slot name=\"svg\" />\r\n      </Svg>\r\n      <slot name=\"front\" />\r\n    {/if}\r\n  </LayerCake>\r\n</div>\r\n{#if legend && zDomain}\r\n  <Legend domain={zDomain} {colors} {line} markerWidth={lineWidth} />\r\n{/if}\r\n{#if footer}\r\n  <Footer>{footer}</Footer>\r\n{/if}\r\n\r\n<style>\r\n  .chart-container {\r\n    width: 100%;\r\n  }\r\n</style>\r\n",
    "<svelte:options accessors={true} />\r\n\r\n<script>\t\r\n\timport { LayerCake, Svg } from 'layercake';\r\n\timport { scaleOrdinal, scaleLinear, scaleSymlog } from 'd3-scale';\r\n  import { tweened } from 'svelte/motion';\r\n\timport { cubicInOut } from 'svelte/easing';\r\n\r\n\timport SetCoords from './shared/SetCoords.svelte';\r\n\timport Scatter from './shared/Scatter.svg.svelte';\r\n\timport Voronoi from './shared/Voronoi.svelte';\r\n\timport AxisX from './shared/AxisX.svelte';\r\n\timport AxisY from './shared/AxisY.svelte';\r\n\timport Legend from './shared/Legend.svelte';\r\n\timport Title from './shared/Title.svelte';\r\n\timport Footer from './shared/Footer.svelte';\r\n\timport Labels from './shared/Labels.svelte';\r\n\r\n\texport let data;\r\n\texport let height = 250; // number of pixels or valid css height string\r\n  export let animation = true;\r\n  export let duration = 800;\r\n\texport let xKey = 'x';\r\n\texport let yKey = null;\r\n\texport let zKey = null;\r\n  export let rKey = null;\r\n\texport let idKey = xKey;\r\n\texport let labelKey = idKey;\r\n\texport let xScale = 'linear';\r\n\texport let yScale = 'linear';\r\n\texport let xFormatTick = d => d;\r\n\texport let yFormatTick = d => d;\r\n\texport let xMax = null;\r\n\texport let xMin = null;\r\n\texport let yMax = null;\r\n\texport let yMin = null;\r\n  export let xAxis = true;\r\n  export let yAxis = true;\r\n\texport let xTicks = 4;\r\n  export let yTicks = 4;\r\n\texport let textColor = '#666';\r\n\texport let tickColor = '#ccc';\r\n\texport let tickDashed = false;\r\n\texport let title = null;\r\n\texport let footer = null;\r\n\texport let legend = false;\r\n\texport let labels = false;\r\n\texport let snapTicks = false;\r\n  export let padding = { top: 0, bottom: 20, left: 35, right: 0 };\r\n  export let buffer = 5;\r\n\texport let color = null;\r\n\texport let colors = color ? [color] : ['#206095', '#A8BD3A', '#003C57', '#27A0CC', '#118C7B', '#F66068', '#746CB1', '#22D0B6', 'lightgrey'];\r\n\texport let r = 4;\r\n\texport let interactive = true;\r\n\texport let xPrefix = \"\";\r\n\texport let xSuffix = \"\";\r\n\texport let yPrefix = \"\";\r\n\texport let ySuffix = \"\";\r\n\texport let hover = false;\r\n\texport let hovered = null;\r\n\texport let colorHover = 'orange';\r\n\texport let select = false;\r\n\texport let selected = null;\r\n\texport let colorSelect = 'black';\r\n\texport let highlighted = [];\r\n\texport let colorHighlight = 'black';\r\n\texport let overlayFill = false;\r\n\r\n\tconst tweenOptions = {\r\n\t\tduration: duration,\r\n\t\teasing: cubicInOut\r\n\t};\r\n\tconst coords = tweened(undefined, tweenOptions);\r\n  \r\n  const distinct = (d, i, arr) => arr.indexOf(d) ==  i;\r\n\r\n\tfunction domGet(data, key, min, max) {\r\n\t\tlet vals = data.map(d => d[key]);\r\n\t\treturn [min ? min : vals[0] ? Math.min(...vals) : -1, max ? max : vals[0] ? Math.max(...vals) : 1];\r\n\t}\r\n\tfunction xDomUpdate(data, key, min, max) {\r\n\t\tlet newDom = domGet(data, key, min, max);\r\n\t\tif (newDom[0] != xDom[0] || newDom[1] != xDom[1]) {\r\n\t\t\txDomain.set(newDom);\r\n\t\t\txDom = newDom;\r\n\t\t}\r\n\t}\r\n\tfunction yDomUpdate(data, key, min, max) {\r\n\t\tlet newDom = key ? domGet(data, key, min, max) : yDom;\r\n\t\tif (newDom[0] != yDom[0] || newDom[1] != yDom[1]) {\r\n\t\t\tyDomain.set(newDom, {duration: animation ? duration : 0});\r\n\t\t\tyDom = newDom;\r\n\t\t}\r\n\t}\r\n\tlet xDom = domGet(data, xKey, xMin, xMax);\r\n\tconst xDomain = tweened(xDom, tweenOptions);\r\n\tlet yDom = domGet(data, yKey, yMin, yMax);\r\n\tconst yDomain = tweened(yDom, tweenOptions);\r\n\r\n\t$: xDomUpdate(data, xKey, xMin, xMax);\r\n\t$: yDomUpdate(data, yKey, yMin, yMax);\r\n  $: zDomain = zKey ? data.map(d => d[zKey]).filter(distinct) : null;\r\n</script>\r\n\r\n{#if title}\r\n  <Title>{title}</Title>\r\n{/if}\r\n<slot name=\"options\"/>\r\n<div class=\"chart-container\" style=\"height: {typeof height == 'number' ? height + 'px' : height }\">\r\n\t<LayerCake\r\n    {padding}\r\n\t\tx={xKey}\r\n\t\ty={yKey}\r\n    z={zKey}\r\n    r={rKey}\r\n\t\txScale={xScale == 'log' ? scaleSymlog() : scaleLinear()}\r\n\t\tyScale={yScale == 'log' ? scaleSymlog() : scaleLinear()}\r\n    zScale={scaleOrdinal()}\r\n\t\txDomain={$xDomain}\r\n\t\tyDomain={$yDomain}\r\n\t\t{zDomain}\r\n\t\tzRange={colors}\r\n    rRange={Array.isArray(r) ? r : [r, r]}\r\n\t\tdata={data}\r\n    xPadding={[buffer, buffer]}\r\n    yPadding={yKey ? [buffer, buffer] : null}\r\n    custom={{\r\n\t\t\ttype: 'scatter',\r\n\t\t\tidKey,\r\n\t\t\tlabelKey,\r\n      coords,\r\n\t\t\tcolorSelect,\r\n\t\t\tcolorHover,\r\n\t\t\tcolorHighlight,\r\n\t\t\tpadding: 1,\r\n      animation,\r\n      duration\r\n    }}\r\n\t\tlet:width\r\n\t>\r\n\t  {#if width > 80} <!-- Hack to prevent rendering before xRange/yRange initialised -->\r\n\t\t<SetCoords/>\r\n    <slot name=\"back\"/>\r\n\t\t<Svg pointerEvents={interactive}>\r\n      {#if xAxis}\r\n\t\t\t  <AxisX ticks={xTicks} formatTick={xFormatTick} {snapTicks} prefix={xPrefix} suffix={xSuffix} {textColor} {tickColor} {tickDashed}/>\r\n      {/if}\r\n      {#if yAxis && yKey}\r\n\t\t\t  <AxisY ticks={yTicks} formatTick={yFormatTick} prefix={yPrefix} suffix={ySuffix} {textColor} {tickColor} {tickDashed}/>\r\n      {/if}\r\n\t\t\t<Scatter {selected} {hovered} {highlighted} {overlayFill}/>\r\n\t\t\t{#if select || hover}\r\n\t\t\t\t<Voronoi {select} bind:selected {hover} bind:hovered {highlighted} on:hover on:select/>\r\n\t\t\t{/if}\r\n\t\t\t{#if labels}\r\n\t\t\t\t<Labels {hovered} {selected}/>\r\n\t\t\t{/if}\r\n\t\t\t<slot name=\"svg\"/>\r\n\t\t</Svg>\r\n\t  <slot name=\"front\"/>\r\n\t\t{/if}\r\n\t</LayerCake>\r\n</div>\r\n{#if legend && zDomain}\r\n  <Legend domain={zDomain} {colors} markerLength={Array.isArray(r) ? r[0] * 2 : r * 2} round={true}/>\r\n{/if}\r\n{#if footer}\r\n  <Footer>{footer}</Footer>\r\n{/if}\r\n\r\n<style>\r\n\t.chart-container {\r\n\t\twidth: 100%;\r\n\t}\r\n</style>",
    "<script>\r\n\timport { getContext } from 'svelte';\r\n\r\n\tconst { width, height, xScale, yRange } = getContext('LayerCake');\r\n\r\n\texport let gridlines = true;\r\n\texport let tickDashed = false;\r\n\texport let tickMarks = false;\r\n\texport let tickColor = '#bbb';\r\n\texport let textColor = '#666';\r\n\texport let formatTick = d => d;\r\n\texport let snapTicks = false;\r\n\texport let ticks = undefined;\r\n\texport let xTick = undefined;\r\n\texport let yTick = 16;\r\n\texport let dxTick = 0;\r\n\texport let dyTick = 0;\r\n\texport let prefix = '';\r\n\texport let suffix = '';\r\n\r\n\t$: isBandwidth = typeof $xScale.bandwidth === 'function';\r\n\r\n\t$: tickVals = Array.isArray(ticks) ? ticks :\r\n\t\tisBandwidth ?\r\n\t\t\t$xScale.domain() :\r\n\t\t\ttypeof ticks === 'function' ?\r\n\t\t\t\tticks($xScale.ticks()) :\r\n\t\t\t\t\t$xScale.ticks(ticks);\r\n\r\n\tfunction textAnchor(i) {\r\n\t\tif (snapTicks === true) {\r\n\t\t\tif (i === 0) {\r\n\t\t\t\treturn 'start';\r\n\t\t\t}\r\n\t\t\tif (i === tickVals.length - 1) {\r\n\t\t\t\treturn 'end';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 'middle';\r\n\t}\r\n</script>\r\n\r\n<g class='axis x-axis' class:snapTicks>\r\n\t{#each tickVals as tick, i}\r\n\t\t<g class='tick tick-{tick}' transform='translate({$xScale(tick)},{$yRange[0]})'>\r\n\t\t\t{#if gridlines !== false}\r\n\t\t\t\t<line class=\"gridline\" class:dashed={tickDashed} y1='{$height * -1}' y2='0' x1='0' x2='0' style='stroke: {tickColor}'></line>\r\n\t\t\t{/if}\r\n\t\t\t{#if tickMarks === true}\r\n\t\t\t\t<line class=\"tick-mark\" y1='{0}' y2='{6}' x1='{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}' x2='{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}' style='stroke: {tickColor}'></line>\r\n\t\t\t{/if}\r\n\t\t\t<text\r\n\t\t\t\tx=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}\"\r\n\t\t\t\ty='{yTick}'\r\n\t\t\t\tdx='{dxTick}'\r\n\t\t\t\tdy='{dyTick}'\r\n\t\t\t\ttext-anchor='{textAnchor(i)}'\r\n\t\t\t\tstyle='fill: {textColor}'>\r\n\t\t\t\t\t{i == tickVals.length - 1 ? prefix + formatTick(tick) + suffix : formatTick(tick)}\r\n\t\t\t\t</text>\r\n\t\t</g>\r\n\t{/each}\r\n</g>\r\n\r\n<style>\r\n\t.tick {\r\n\t\tfont-size: .8em;\r\n\t}\r\n\r\n\t.tick .tick-mark,\r\n\t.tick.tick-0 line {\r\n\t\tstroke-dasharray: 0;\r\n\t}\r\n\r\n\t.dashed {\r\n\t\tstroke-dasharray: 2;\r\n\t}\r\n\t/* This looks slightly better */\r\n\t.axis.snapTicks .tick:last-child text {\r\n\t\ttransform: translateX(3px);\r\n\t}\r\n\t.axis.snapTicks .tick.tick-0 text {\r\n\t\ttransform: translateX(-3px);\r\n\t}\r\n</style>\r\n",
    "<script>\r\n\timport { getContext } from 'svelte';\r\n\r\n\tconst { padding, xRange, yScale } = getContext('LayerCake');\r\n\r\n\texport let ticks = 4;\r\n\texport let tickMarks = false;\r\n\texport let gridlines = true;\r\n\texport let tickDashed = false;\r\n\texport let tickColor = '#bbb';\r\n\texport let textColor = '#666';\r\n\texport let formatTick = d => d;\r\n\texport let xTick = 0;\r\n\texport let yTick = 0;\r\n\texport let dxTick = 0;\r\n\texport let dyTick = -4;\r\n\texport let textAnchor = 'start';\r\n\texport let prefix = '';\r\n\texport let suffix = '';\r\n\r\n\t$: isBandwidth = typeof $yScale.bandwidth === 'function';\r\n\r\n\t$: tickVals = Array.isArray(ticks) ? ticks :\r\n\t\tisBandwidth ?\r\n\t\t\t$yScale.domain() :\r\n\t\t\ttypeof ticks === 'function' ?\r\n\t\t\t\tticks($yScale.ticks()) :\r\n\t\t\t\t\t$yScale.ticks(ticks);\r\n</script>\r\n\r\n<g class='axis y-axis' transform='translate({-$padding.left}, 0)'>\r\n\t{#each tickVals as tick, i}\r\n\t\t<g class='tick tick-{tick}' transform='translate({$xRange[0] + (isBandwidth ? $padding.left : 0)}, {$yScale(tick)})'>\r\n\t\t\t{#if gridlines !== false}\r\n\t\t\t\t<line\r\n\t\t\t\t\tclass=\"gridline\"\r\n\t\t\t\t\tx2='100%'\r\n\t\t\t\t\ty1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\r\n\t\t\t\t\ty2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\r\n\t\t\t\t\tclass:dashed={tickDashed}\r\n\t\t\t\t\tstyle='stroke: {tickColor}'\r\n\t\t\t\t></line>\r\n\t\t\t{/if}\r\n\t\t\t{#if tickMarks === true}\r\n\t\t\t\t<line\r\n\t\t\t\t\tclass='tick-mark'\r\n\t\t\t\t\tx1='0'\r\n\t\t\t\t\tx2='{isBandwidth ? -6 : 6}'\r\n\t\t\t\t\ty1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\r\n\t\t\t\t\ty2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\r\n\t\t\t\t\tstyle='stroke: {tickColor}'\r\n\t\t\t\t></line>\r\n\t\t\t{/if}\r\n\t\t\t<text\r\n\t\t\t\tx='{xTick}'\r\n\t\t\t\ty='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}'\r\n\t\t\t\tdx='{isBandwidth ? -4 : dxTick}'\r\n\t\t\t\tdy='{isBandwidth ? 4 : dyTick}'\r\n\t\t\t\tstyle=\"text-anchor:{isBandwidth ? 'end' : textAnchor}; fill: {textColor}\">\r\n\t\t\t\t\t{i == tickVals.length - 1 ? prefix + formatTick(tick) + suffix : formatTick(tick)}\r\n\t\t\t\t</text>\r\n\t\t</g>\r\n\t{/each}\r\n</g>\r\n\r\n<style>\r\n\t.tick {\r\n\t\tfont-size: .8em;\r\n\t}\r\n\r\n\t.dashed {\r\n\t\tstroke-dasharray: 2;\r\n\t}\r\n\r\n\t.tick.tick-0 line {\r\n\t\tstroke-dasharray: 0;\r\n\t}\r\n</style>\r\n",
    "<div class=\"footer\"><slot/></div>\r\n\r\n<style>\r\n\t.footer {\r\n\t\tfont-size: .8em;\r\n\t\tcolor: grey;\r\n\t\tmargin-top: 5px;\r\n\t}\r\n</style>",
    "<script>\r\n\timport { getContext } from 'svelte';\r\n\r\n\tconst { data, xScale, yScale, custom } = getContext('LayerCake');\r\n\r\n\texport let hovered = null;\r\n\texport let selected = null;\r\n\t\r\n\tlet coords = $custom.coords;\r\n\tlet idKey = $custom.idKey;\r\n\tlet labelKey = $custom.labelKey;\r\n\t// let colorHover = $custom.colorHover ? $custom.colorHover : 'orange';\r\n\t// let colorSelect = $custom.colorSelect ? $custom.colorSelect : '#206095';\r\n</script>\r\n\r\n{#if $coords}\r\n<defs>\r\n\t<filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" id=\"bgfill\">\r\n\t\t<feFlood flood-color=\"rgba(255,255,255,0.8)\" result=\"bg\" />\r\n\t\t<feMerge>\r\n\t\t\t<feMergeNode in=\"bg\"/>\r\n\t\t\t<feMergeNode in=\"SourceGraphic\"/>\r\n\t\t</feMerge>\r\n\t</filter>\r\n</defs>\r\n<g class=\"label-group\">\r\n\t{#if $coords[0] && $coords[0].x}\r\n\t{#each $coords as d, i}\r\n\t\t{#if [hovered, selected].includes($data[i][idKey])}\r\n\t\t<text\r\n\t\t\tclass=\"label\"\r\n\t\t\ttransform=\"translate(5,-5)\"\r\n\t\t\tfilter=\"url(#bgfill)\"\r\n\t\t\tfill=\"#333\"\r\n\t\t  x={$xScale(d.x)}\r\n\t\t\ty={$yScale(d.y)}>\r\n\t\t\t{$data[i][labelKey]}\r\n\t\t</text>\r\n\t\t{/if}\r\n\t{/each}\r\n\t{:else if $coords[0] && $coords[0][0] && $coords[0][0].x}\r\n\t{#each $coords as d, i}\r\n\t\t{#if [hovered, selected].includes($data[i][0][idKey])}\r\n\t\t<text\r\n\t\t\tclass=\"label\"\r\n\t\t\ttransform=\"translate(2,3)\"\r\n\t\t\tfilter=\"url(#bgfill)\"\r\n\t\t\tfill=\"#333\"\r\n\t\t  x={$xScale(d[d.length - 1].x)}\r\n\t\t\ty={$yScale(d[d.length - 1].y)}>\r\n\t\t\t{$data[i][0][labelKey]}\r\n\t\t</text>\r\n\t\t{/if}\r\n\t{/each}\r\n\t{/if}\r\n</g>\r\n{/if}\r\n\r\n<style>\r\n\t.label {\r\n\t\tfont-size: 0.8em;\r\n\t}\r\n</style>",
    "<script>\r\n  export let domain = null;\r\n  export let colors = null;\r\n  export let line = false; // true if line chart\r\n  export let comparison = false; // true if chart uses bars + markers for comparison\r\n  export let horizontal = true; // true if marker lines should be horizontal, false if vertical\r\n  export let markerWidth = 2.5;\r\n  export let markerLength = 13;\r\n  export let round = false; // to represent round markers\r\n</script>\r\n\r\n{#if Array.isArray(domain) && Array.isArray(colors)}\r\n  <ul class=\"legend\">\r\n    {#each domain as label, i}\r\n      <li>\r\n        <div\r\n          class=\"bullet\"\r\n          class:round\r\n          style=\"background-color: {colors[i]}; width: {!horizontal && (line || (comparison && i != 0)) ? markerWidth : markerLength}px; height: {horizontal && (line || (comparison && i != 0)) ? markerWidth : markerLength}px\"\r\n        />\r\n        {label}\r\n      </li>\r\n    {/each}\r\n  </ul>\r\n{/if}\r\n\r\n<style>\r\n  ul.legend {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  ul.legend li {\r\n    display: inline;\r\n    font-size: .8em;\r\n  }\r\n  ul.legend li + li {\r\n    margin-left: 8px;\r\n  }\r\n  .bullet {\r\n\t\tdisplay: inline-block;\r\n    vertical-align: middle;\r\n\t}\r\n  .round {\r\n    border-radius: 50%;\r\n  }\r\n</style>",
    "<script>\r\n  import { getContext, createEventDispatcher } from 'svelte';\r\n  import { fade } from 'svelte/transition';\r\n  let {\r\n    data,\r\n    xScale,\r\n    yScale,\r\n    zGet,\r\n    config,\r\n    custom,\r\n    x,\r\n    y,\r\n    r,\r\n    zRange,\r\n    xGet,\r\n    yGet,\r\n    rGet,\r\n    yRange,\r\n    rRange,\r\n    width,\r\n  } = getContext('LayerCake');\r\n\r\n  const dispatch = createEventDispatcher();\r\n\r\n  export let lineWidth = 2.5;\r\n  export let hover = false;\r\n  export let hovered = null;\r\n  export let select = false;\r\n  export let selected = null;\r\n  export let highlighted = [];\r\n\r\n  let coords = $custom.coords;\r\n  let step = $custom.step;\r\n  let idKey = $custom.idKey;\r\n  let colorHover = $custom.colorHover ? $custom.colorHover : 'orange';\r\n  let colorSelect = $custom.colorSelect ? $custom.colorSelect : '#206095';\r\n  let colorHighlight = $custom.colorHighlight\r\n    ? $custom.colorHighlight\r\n    : '#206095';\r\n  let type = $custom.type;\r\n  let prevWidth = $width;\r\n  let groups_all = $custom.groups_all;\r\n  let groups_selected = $custom.groups_selected;\r\n  let debounceTimer;\r\n  let debounceValue = 100;\r\n  let coords_subset;\r\n  let colors_subset = $zRange;\r\n  $: {\r\n    debouncedSetCoords($data, $custom, $x, $y, $r, $width);\r\n  }\r\n\r\n  // Path subset logic here\r\n  $: {\r\n    groups_selected = $custom.groups_selected;\r\n\r\n    const index_to_include = groups_all\r\n      .map((item, index) => (groups_selected.includes(item) ? index : -1))\r\n      .filter((index) => index !== -1);\r\n\r\n    if ($coords) {\r\n      coords_subset = index_to_include.map((index) => $coords[index]);\r\n      colors_subset = index_to_include.map((index) => $zRange[index]);\r\n    }\r\n  }\r\n\r\n  // Function to make SVG path\r\n  const makePath = (group) => {\r\n    let path =\r\n      'M' +\r\n      group\r\n        .map((d) => {\r\n          return $xScale(d.x) + ',' + $yScale(d.y);\r\n        })\r\n        .join('L');\r\n    return path;\r\n  };\r\n\r\n  function doHover(e, d) {\r\n    if (hover) {\r\n      hovered = d ? d[0][idKey] : null;\r\n      dispatch('hover', {\r\n        id: hovered,\r\n        data: d,\r\n        event: e,\r\n      });\r\n    }\r\n  }\r\n\r\n  function doSelect(e, d) {\r\n    if (select) {\r\n      selected = d ? d[0][idKey] : null;\r\n      dispatch('select', {\r\n        id: selected,\r\n        data: d,\r\n        event: e,\r\n      });\r\n    }\r\n  }\r\n\r\n  function debounce(func, wait) {\r\n    let timeout;\r\n    return function executedFunction(...args) {\r\n      const later = () => {\r\n        clearTimeout(timeout);\r\n        func(...args);\r\n      };\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(later, wait);\r\n    };\r\n  }\r\n  const debouncedLog = debounce((val) => console.log(val), 200);\r\n  function debouncedSetCoords(data, custom, x, y, r, width) {\r\n    clearTimeout(debounceTimer);\r\n    debounceTimer = setTimeout(() => {\r\n      console.log('debouncedSetCoords() fires');\r\n      let mode = custom.mode;\r\n      let padding = custom.padding;\r\n      let duration =\r\n        custom.animation && width == prevWidth ? custom.duration : 0;\r\n\r\n      prevWidth = width;\r\n\r\n      let newcoords;\r\n      if (type == 'line') {\r\n        newcoords = data.map((d) =>\r\n          d.map((e) => {\r\n            return {\r\n              x: x(e),\r\n              y: y(e),\r\n            };\r\n          })\r\n        );\r\n      }\r\n      coords.set(newcoords, { duration });\r\n    }, debounceValue); // Debounce time: 200 milliseconds (adjust as needed)\r\n  }\r\n</script>\r\n\r\n{#if coords_subset}\r\n  <g class=\"line-group\">\r\n    {#each coords_subset as group, i}\r\n      <path\r\n        class=\"path-hover\"\r\n        d={makePath(group)}\r\n        on:mouseover={(e) => doHover(e, $data[i])}\r\n        on:mouseleave={(e) => doHover(e, null)}\r\n        on:focus={(e) => doHover(e, $data[i])}\r\n        on:blur={(e) => doHover(e, null)}\r\n        on:click={(e) => doSelect(e, $data[i])}\r\n      />\r\n      <path\r\n        class=\"path-line\"\r\n        d={makePath(group)}\r\n        stroke={colors_subset[i]}\r\n        stroke-width={lineWidth}\r\n        transition:fade={{ delay: 0, duration: 300 }}\r\n      />\r\n    {/each}\r\n\r\n    {#if idKey && (hover || selected || highlighted[0])}\r\n      {#each $coords as group, i}\r\n        {#if [hovered, selected, ...highlighted].includes($data[i][0][idKey])}\r\n          <path\r\n            class=\"path-overlay\"\r\n            d={makePath(group)}\r\n            stroke={$data[i][0][idKey] == hovered\r\n              ? colorHover\r\n              : $data[i][0][idKey] == selected\r\n              ? colorSelect\r\n              : colorHighlight}\r\n            stroke-width={lineWidth + 1.5}\r\n          />\r\n        {/if}\r\n      {/each}\r\n    {/if}\r\n  </g>\r\n{/if}\r\n\r\n<style>\r\n  path {\r\n    fill: none;\r\n    stroke-linejoin: round;\r\n    stroke-linecap: round;\r\n  }\r\n  .path-hover {\r\n    stroke: rgba(255, 255, 255, 0);\r\n    stroke-width: 7;\r\n  }\r\n  .path-line,\r\n  .path-overlay {\r\n    pointer-events: none;\r\n  }\r\n</style>\r\n",
    "<div class=\"title\"><slot/></div>\r\n\r\n<style>\r\n\t.title {\r\n\t\tfont-size: 1.1em;\r\n\t\tfont-weight: bold;\r\n\t\tmargin-bottom: 10px;\r\n\t}\r\n</style>",
    "<script>\r\n\timport { Delaunay } from 'd3-delaunay';\r\n\timport { getContext, createEventDispatcher } from 'svelte';\r\n\r\n\tconst { data, width, height, custom, xScale, yScale } = getContext('LayerCake');\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\texport let hover = false;\r\n\texport let hovered = null;\r\n\texport let select = false;\r\n\texport let selected = null;\r\n\r\n\tlet coords = $custom.coords;\r\n\tlet idKey = $custom.idKey;\r\n\r\n\tfunction doHover(e, d) {\r\n\t\tif (hover) {\r\n\t\t\thovered = d ? d[idKey] : null;\r\n\t\t\tdispatch('hover', {\r\n\t\t\t\tid: hovered,\r\n\t\t\t\tdata: d,\r\n\t\t\t\tevent: e\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tfunction doSelect(e, d) {\r\n\t\tif (select) {\r\n\t\t\tselected = d ? d[idKey] : null;\r\n\t\t\tdispatch('select', {\r\n\t\t\t\tid: selected,\r\n\t\t\t\tdata: d,\r\n\t\t\t\tevent: e\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t$: coordsArray = Array.isArray($coords) ? $coords.map(d => [$xScale(d.x), $yScale(d.y)]) : [];\r\n\t$: voronoi = Delaunay.from(coordsArray).voronoi([0, 0, $width, $height]);\r\n\r\n</script>\r\n\r\n<style>\r\n\t.voronoi-cell {\r\n\t\tfill: none;\r\n\t\tstroke: none;\r\n\t\tpointer-events: all;\r\n\t}\r\n</style>\r\n\r\n{#if voronoi}\r\n<g class=\"voronoi-group\">\r\n{#each $data as d, i}\r\n\t<path\r\n\t\tclass=\"voronoi-cell\"\r\n\t\td={voronoi.renderCell(i)}\r\n\t\ton:mouseover={e => doHover(e, $data[i])}\r\n\t\ton:mouseleave={e => doHover(e, null)}\r\n\t\ton:focus={e => doHover(e, $data[i])}\r\n\t\ton:blur={e => doHover(e, null)}\r\n\t\ton:click={e => doSelect(e, $data[i])}\r\n\t/>\r\n{/each}\r\n</g>\r\n{/if}\r\n",
    "<script>\n\timport { setContext } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\n\timport makeAccessor from './utils/makeAccessor.js';\n\timport filterObject from './utils/filterObject.js';\n\timport calcExtents from './lib/calcExtents.js';\n\timport calcDomain from './helpers/calcDomain.js';\n\timport createScale from './helpers/createScale.js';\n\timport createGetter from './helpers/createGetter.js';\n\timport getRange from './helpers/getRange.js';\n\timport defaultScales from './settings/defaultScales.js';\n\timport defaultReverses from './settings/defaultReverses.js';\n\n\texport let ssr = false;\n\texport let pointerEvents = true;\n\texport let position = 'relative';\n\texport let percentRange = false;\n\n\texport let width = undefined;\n\texport let height = undefined;\n\n\texport let containerWidth = width || 100;\n\texport let containerHeight = height || 100;\n\n\t/* --------------------------------------------\n\t * Parameters\n\t * Values that computed properties are based on and that\n\t * can be easily extended from config values\n\t *\n\t */\n\texport let x = undefined;\n\texport let y = undefined;\n\texport let z = undefined;\n\texport let r = undefined;\n\texport let custom = {};\n\texport let data = [];\n\texport let xDomain = undefined;\n\texport let yDomain = undefined;\n\texport let zDomain = undefined;\n\texport let rDomain = undefined;\n\texport let xNice = false;\n\texport let yNice = false;\n\texport let zNice = false;\n\texport let rNice = false;\n\texport let xReverse = defaultReverses.x;\n\texport let yReverse = defaultReverses.y;\n\texport let zReverse = defaultReverses.z;\n\texport let rReverse = defaultReverses.r;\n\texport let xPadding = undefined;\n\texport let yPadding = undefined;\n\texport let zPadding = undefined;\n\texport let rPadding = undefined;\n\texport let xScale = defaultScales.x;\n\texport let yScale = defaultScales.y;\n\texport let zScale = defaultScales.y;\n\texport let rScale = defaultScales.r;\n\texport let xRange = undefined;\n\texport let yRange = undefined;\n\texport let zRange = undefined;\n\texport let rRange = undefined;\n\texport let padding = {};\n\texport let extents = {};\n\texport let flatData = undefined;\n\n\t/* --------------------------------------------\n\t * Preserve a copy of our passed in settings before we modify them\n\t * Return this to the user's context so they can reference things if need be\n\t * Add the active keys since those aren't on our settings object.\n\t * This is mostly an escape-hatch\n\t */\n\tconst config = {};\n\t$: if (x) config.x = x;\n\t$: if (y) config.y = y;\n\t$: if (z) config.z = z;\n\t$: if (r) config.r = r;\n\t$: if (xDomain) config.xDomain = xDomain;\n\t$: if (yDomain) config.yDomain = yDomain;\n\t$: if (zDomain) config.zDomain = zDomain;\n\t$: if (rDomain) config.rDomain = rDomain;\n\t$: if (xRange) config.xRange = xRange;\n\t$: if (yRange) config.yRange = yRange;\n\t$: if (zRange) config.zRange = zRange;\n\t$: if (rRange) config.rRange = rRange;\n\n\t/* --------------------------------------------\n\t * Make store versions of each parameter\n\t * Prefix these with `_` to keep things organized\n\t */\n\tconst _percentRange = writable();\n\tconst _containerWidth = writable();\n\tconst _containerHeight = writable();\n\tconst _x = writable();\n\tconst _y = writable();\n\tconst _z = writable();\n\tconst _r = writable();\n\tconst _custom = writable();\n\tconst _data = writable();\n\tconst _xDomain = writable();\n\tconst _yDomain = writable();\n\tconst _zDomain = writable();\n\tconst _rDomain = writable();\n\tconst _xNice = writable();\n\tconst _yNice = writable();\n\tconst _zNice = writable();\n\tconst _rNice = writable();\n\tconst _xReverse = writable();\n\tconst _yReverse = writable();\n\tconst _zReverse = writable();\n\tconst _rReverse = writable();\n\tconst _xPadding = writable();\n\tconst _yPadding = writable();\n\tconst _zPadding = writable();\n\tconst _rPadding = writable();\n\tconst _xScale = writable();\n\tconst _yScale = writable();\n\tconst _zScale = writable();\n\tconst _rScale = writable();\n\tconst _xRange = writable();\n\tconst _yRange = writable();\n\tconst _zRange = writable();\n\tconst _rRange = writable();\n\tconst _padding = writable();\n\tconst _flatData = writable();\n\tconst _extents = writable();\n\tconst _config = writable(config);\n\n\t$: _percentRange.set(percentRange);\n\t$: _containerWidth.set(containerWidth);\n\t$: _containerHeight.set(containerHeight);\n\t$: _x.set(makeAccessor(x));\n\t$: _y.set(makeAccessor(y));\n\t$: _z.set(makeAccessor(z));\n\t$: _r.set(makeAccessor(r));\n\t$: _xDomain.set(xDomain);\n\t$: _yDomain.set(yDomain);\n\t$: _zDomain.set(zDomain);\n\t$: _rDomain.set(rDomain);\n\t$: _custom.set(custom);\n\t$: _data.set(data);\n\t$: _xNice.set(xNice);\n\t$: _yNice.set(yNice);\n\t$: _zNice.set(zNice);\n\t$: _rNice.set(rNice);\n\t$: _xReverse.set(xReverse);\n\t$: _yReverse.set(yReverse);\n\t$: _zReverse.set(zReverse);\n\t$: _rReverse.set(rReverse);\n\t$: _xPadding.set(xPadding);\n\t$: _yPadding.set(yPadding);\n\t$: _zPadding.set(zPadding);\n\t$: _rPadding.set(rPadding);\n\t$: _xScale.set(xScale);\n\t$: _yScale.set(yScale);\n\t$: _zScale.set(zScale);\n\t$: _rScale.set(rScale);\n\t$: _xRange.set(xRange);\n\t$: _yRange.set(yRange);\n\t$: _zRange.set(zRange);\n\t$: _rRange.set(rRange);\n\t$: _padding.set(padding);\n\t$: _extents.set(filterObject(extents));\n\t$: _flatData.set(flatData || data);\n\n\t/* --------------------------------------------\n\t * Create derived values\n\t * Suffix these with `_d`\n\t */\n\tconst activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {\n\t\treturn [\n\t\t\t{ field: 'x', accessor: $x },\n\t\t\t{ field: 'y', accessor: $y },\n\t\t\t{ field: 'z', accessor: $z },\n\t\t\t{ field: 'r', accessor: $r }\n\t\t].filter(d => d.accessor);\n\t});\n\n\tconst padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {\n\t\tconst defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };\n\t\treturn Object.assign(defaultPadding, $padding);\n\t});\n\n\tconst box_d = derived([_containerWidth, _containerHeight, padding_d], ([$containerWidth, $containerHeight, $padding]) => {\n\t\tconst b = {};\n\t\tb.top = $padding.top;\n\t\tb.right = $containerWidth - $padding.right;\n\t\tb.bottom = $containerHeight - $padding.bottom;\n\t\tb.left = $padding.left;\n\t\tb.width = b.right - b.left;\n\t\tb.height = b.bottom - b.top;\n\t\tif (b.width < 0 && b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative width and height. Did you forget to set a width or height on the container?');\n\t\t} else if (b.width < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has a negative width. Did you forget to set that CSS on the container?');\n\t\t} else if (b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative height. Did you forget to set that CSS on the container?');\n\t\t}\n\t\treturn b;\n\t});\n\n\tconst width_d = derived([box_d], ([$box]) => {\n\t\treturn $box.width;\n\t});\n\n\tconst height_d = derived([box_d], ([$box]) => {\n\t\treturn $box.height;\n\t});\n\n\t/* --------------------------------------------\n\t * Calculate extents by taking the extent of the data\n\t * and filling that in with anything set by the user\n\t */\n\tconst extents_d = derived([_flatData, activeGetters_d, _extents], ([$flatData, $activeGetters, $extents]) => {\n\t\treturn { ...calcExtents($flatData, $activeGetters.filter(d => !$extents[d.field])), ...$extents };\n\t});\n\n\tconst xDomain_d = derived([extents_d, _xDomain], calcDomain('x'));\n\tconst yDomain_d = derived([extents_d, _yDomain], calcDomain('y'));\n\tconst zDomain_d = derived([extents_d, _zDomain], calcDomain('z'));\n\tconst rDomain_d = derived([extents_d, _rDomain], calcDomain('r'));\n\n\tconst xScale_d = derived([_xScale, extents_d, xDomain_d, _xPadding, _xNice, _xReverse, width_d, height_d, _xRange, _percentRange], createScale('x'));\n\tconst xGet_d = derived([_x, xScale_d], createGetter);\n\n\tconst yScale_d = derived([_yScale, extents_d, yDomain_d, _yPadding, _yNice, _yReverse, width_d, height_d, _yRange, _percentRange], createScale('y'));\n\tconst yGet_d = derived([_y, yScale_d], createGetter);\n\n\tconst zScale_d = derived([_zScale, extents_d, zDomain_d, _zPadding, _zNice, _zReverse, width_d, height_d, _zRange, _percentRange], createScale('z'));\n\tconst zGet_d = derived([_z, zScale_d], createGetter);\n\n\tconst rScale_d = derived([_rScale, extents_d, rDomain_d, _rPadding, _rNice, _rReverse, width_d, height_d, _rRange, _percentRange], createScale('r'));\n\tconst rGet_d = derived([_r, rScale_d], createGetter);\n\n\tconst xRange_d = derived([xScale_d], getRange);\n\tconst yRange_d = derived([yScale_d], getRange);\n\tconst zRange_d = derived([zScale_d], getRange);\n\tconst rRange_d = derived([rScale_d], getRange);\n\n\tconst aspectRatio_d = derived([width_d, height_d], ([$aspectRatio, $width, $height]) => {\n\t\treturn $width / $height;\n\t});\n\n\t$: context = {\n\t\tactiveGetters: activeGetters_d,\n\t\twidth: width_d,\n\t\theight: height_d,\n\t\tpercentRange: _percentRange,\n\t\taspectRatio: aspectRatio_d,\n\t\tcontainerWidth: _containerWidth,\n\t\tcontainerHeight: _containerHeight,\n\t\tx: _x,\n\t\ty: _y,\n\t\tz: _z,\n\t\tr: _r,\n\t\tcustom: _custom,\n\t\tdata: _data,\n\t\txNice: _xNice,\n\t\tyNice: _yNice,\n\t\tzNice: _zNice,\n\t\trNice: _rNice,\n\t\txReverse: _xReverse,\n\t\tyReverse: _yReverse,\n\t\tzReverse: _zReverse,\n\t\trReverse: _rReverse,\n\t\txPadding: _xPadding,\n\t\tyPadding: _yPadding,\n\t\tzPadding: _zPadding,\n\t\trPadding: _rPadding,\n\t\tpadding: padding_d,\n\t\tflatData: _flatData,\n\t\textents: extents_d,\n\t\txDomain: xDomain_d,\n\t\tyDomain: yDomain_d,\n\t\tzDomain: zDomain_d,\n\t\trDomain: rDomain_d,\n\t\txRange: xRange_d,\n\t\tyRange: yRange_d,\n\t\tzRange: zRange_d,\n\t\trRange: rRange_d,\n\t\tconfig: _config,\n\t\txScale: xScale_d,\n\t\txGet: xGet_d,\n\t\tyScale: yScale_d,\n\t\tyGet: yGet_d,\n\t\tzScale: zScale_d,\n\t\tzGet: zGet_d,\n\t\trScale: rScale_d,\n\t\trGet: rGet_d\n\t};\n\n\t$: setContext('LayerCake', context);\n</script>\n\n{#if (ssr === true || typeof window !== 'undefined')}\n\t<div\n\t\tclass=\"layercake-container\"\n\t\tstyle=\"\n\t\t\tposition:{position};\n\t\t\t{position === 'absolute' ? 'top:0;right:0;bottom:0;left:0;' : ''}\n\t\t\t{pointerEvents === false ? 'pointer-events:none;' : ''}\n\t\t\"\n\t\tbind:clientWidth={containerWidth}\n\t\tbind:clientHeight={containerHeight}\n\t>\n\t\t<slot\n\t\t\twidth={$width_d}\n\t\t\theight={$height_d}\n\t\t\taspectRatio={$aspectRatio_d}\n\t\t\tcontainerWidth={$_containerWidth}\n\t\t\tcontainerHeight={$_containerHeight}\n\t\t></slot>\n\t</div>\n{/if}\n\n<style>\n\t.layercake-container,\n\t.layercake-container :global(*) {\n\t\tbox-sizing: border-box;\n\t}\n\t.layercake-container {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<div\n\tclass=\"layercake-layout-html\"\n\tstyle=\"top: {$padding.top}px; right:{$padding.right}px; bottom:{$padding.bottom}px; left:{$padding.left}px;{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<slot></slot>\n</div>\n\n<style>\n\tdiv,\n\tslot {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let fixedAspectRatio = 1;\n\texport let viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<svg\n\t{viewBox}\n\tpreserveAspectRatio=\"none\"\n\tstyle=\"top: {$padding.top}px; right:0px; bottom:0px; left:{$padding.left}px;width:calc(100% - {($padding.left + $padding.right)}px);height:calc(100% - {($padding.top + $padding.bottom)}px);{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\n\t<slot></slot>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t}\n\tsvg :global(*) {\n\t\tvector-effect: non-scaling-stroke;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let viewBox = undefined;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { containerWidth, containerHeight, padding } = getContext('LayerCake');\n</script>\n<svg\n\tclass=\"layercake-layout-svg\"\n\t{viewBox}\n\twidth={$containerWidth}\n\theight={$containerHeight}\n\tstyle=\"{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\t<g transform=\"translate({$padding.left}, {$padding.top})\">\n\t\t<slot></slot>\n\t</g>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\toverflow: visible;\n\t}\n</style>\n",
    "<!-- \r\n  # ============================================================================ #\r\n  #  ............... script ...............\r\n-->\r\n\r\n<script>\r\n  // # ============================================================================ #\r\n  // 1. Core imports\r\n  import { setContext, onMount } from 'svelte';\r\n  import { getMotion } from './utils.js';\r\n  import { themes } from './config.js';\r\n  import UHCHeader from './layout/UHCHeader.svelte';\r\n  import UHCFooter from './layout/UHCFooter.svelte';\r\n  import Header from './layout/Header.svelte';\r\n  import Section from './layout/Section.svelte';\r\n  import Media from './layout/Media.svelte';\r\n  import Scroller from './layout/Scroller.svelte';\r\n  import Filler from './layout/Filler.svelte';\r\n  import Divider from './layout/Divider.svelte';\r\n  import Toggle from './ui/Toggle.svelte';\r\n  import Arrow from './ui/Arrow.svelte';\r\n\r\n  // # ============================================================================ #\r\n  // 2. Project sepecific imports\r\n  import { getData, setColors, getBreaks, getColor } from './utils.js';\r\n  import { colors } from './config.js';\r\n  import { LineChart } from '../libs/@onsvisual/svelte-charts';\r\n\r\n  // # ============================================================================ #\r\n  // 3. Core config\r\n  // Set theme globally (options are 'light', 'dark' or 'lightblue')\r\n  let theme = 'light';\r\n  setContext('theme', theme);\r\n  setColors(themes, theme);\r\n\r\n  // # ============================================================================ #\r\n  // 4. Scroller Configs\r\n  //  - These dont change much between projects.\r\n  //// Config\r\n  const threshold = 0.65;\r\n\r\n  //// State\r\n\r\n  let animation = getMotion(); // Set animation preference depending on browser preference\r\n  let hover = true;\r\n  let hovered = null;\r\n  let hoveredScatter = null;\r\n  let select = true;\r\n  let selected = null;\r\n  let selectedScatter = null;\r\n  let id = {}; // Object to hold visible section IDs of Scroller components\r\n  let idPrev = {}; // Object to keep track of previous IDs, to compare for changes\r\n  onMount(() => {\r\n    idPrev = { ...id };\r\n  });\r\n\r\n  // Scroll Updater\r\n  function runActions(codes = []) {\r\n    //// Code to run Scroller actions when new caption IDs come into view\r\n    codes.forEach((code) => {\r\n      if (id[code] != idPrev[code]) {\r\n        // if caption id changes then run then run following code to update chart\r\n        if (actions[code][id[code]]) {\r\n          actions[code][id[code]]();\r\n        }\r\n        idPrev[code] = id[code];\r\n        step = id[code];\r\n      }\r\n    });\r\n  }\r\n  $: {\r\n    // Run above code when 'id' object changes\r\n    if (id) {\r\n      runActions(Object.keys(actions));\r\n    }\r\n  }\r\n  // # ============================================================================ #\r\n  // 5. Project Configs\r\n  // THese will change across projects\r\n\r\n  // # ============================================================================ #\r\n  //   5.1 Scrolly actions *********\r\n  let step = 'chart01';\r\n  let data; // initializes async in 5.5\r\n  // let yKey = 'apples';\r\n  let yMin = 0;\r\n  // In this fake data. flowers = 'philly' and apples = 'us average'\r\n  let groups_template = [\r\n    { group: 'apples', color: '#206095' },\r\n    { group: 'cherries', color: '#A8BD3A' },\r\n    { group: 'dates', color: '#003C57' },\r\n    { group: 'flowers', color: '#27A0CC' },\r\n  ];\r\n  let colors_all = groups_template.map((d) => d.color);\r\n  let groups_all = groups_template.map((d) => d.group);\r\n  let groups_normal = groups_all.filter((d) => d != 'flowers');\r\n  let groups_selected = groups_normal;\r\n  let xMax;\r\n  let yMax = 85;\r\n  let actions = {\r\n    chart: {\r\n      chart01: () => {\r\n        data = data;\r\n        yMin = 0;\r\n        yMax = 85;\r\n        groups_selected = groups_normal;\r\n        step = 'chart01';\r\n        xMax = null;\r\n      },\r\n      chart02: () => {\r\n        data = data;\r\n        yMin = 65;\r\n        yMax = 85;\r\n        groups_selected = groups_normal;\r\n        step = 'chart02';\r\n        xMax = null;\r\n      },\r\n      chart03: () => {\r\n        data = data;\r\n        yMin = 65;\r\n        yMax = 85;\r\n        groups_selected = groups_all;\r\n        step = 'chart03';\r\n        xMax = null;\r\n      },\r\n      chart04: () => {\r\n        data = data;\r\n        yMin = 65;\r\n        yMax = 85;\r\n        groups_selected = ['flowers'];\r\n        step = 'chart04';\r\n        xMax = null;\r\n      },\r\n      chart05: () => {\r\n        data = data;\r\n        yMin = 70;\r\n        yMax = 75;\r\n        groups_selected = ['flowers'];\r\n        step = 'chart04';\r\n        xMax = 1998;\r\n      },\r\n      chart06: () => {\r\n        data = data;\r\n        yMin = 70;\r\n        yMax = 75;\r\n        groups_selected = ['flowers'];\r\n        step = 'chart04';\r\n        xMax = 2008;\r\n      },\r\n      chart07: () => {\r\n        data = data;\r\n        yMin = 70;\r\n        yMax = 75;\r\n        groups_selected = ['flowers'];\r\n        step = 'chart04';\r\n        xMax = null;\r\n      },\r\n    },\r\n  };\r\n\r\n  // # ============================================================================ #\r\n  //   5.4 State\r\n\r\n  // # ============================================================================ #\r\n  //   5.5 Initialisation code (get data)\r\n\r\n  getData(`./data/data_le.csv`).then((arr) => {\r\n    data = arr;\r\n  });\r\n</script>\r\n\r\n<!-- \r\n  # ============================================================================ #\r\n  #  ............... markup ...............\r\n-->\r\n\r\n<!-- \r\n  # ============================================================================ #\r\n  #  Header\r\n-->\r\n<!-- \r\n<UHCHeader filled={true} center={false} />\r\n\r\n<Header\r\n  bgcolor=\"#206095\"\r\n  bgfixed={true}\r\n  theme=\"dark\"\r\n  center={false}\r\n  short={true}\r\n>\r\n  <h1>UHC Svelte Scrolly Template</h1>\r\n  <p class=\"text-big\" style=\"margin-top: 5px\">\r\n    Epsom Lorem ipsum dolor, sit amet consectetur adipisicing elit. Sequi\r\n    voluptate sed quisquam inventore quia odio illo maiores cum enim, aspernatur\r\n    laboriosam amet ipsam, eligendi optio dolor doloribus minus! Dicta, laborum?\r\n  </p>\r\n  <p style=\"margin-top: 20px\">DD MMM YYYY</p>\r\n  <p>\r\n    <Toggle\r\n      label=\"Animation {animation ? 'on' : 'off'}\"\r\n      mono={true}\r\n      bind:checked={animation}\r\n    />\r\n  </p>\r\n  <div style=\"margin-top: 90px;\">\r\n    <Arrow color=\"white\" {animation}>Scroll to begin</Arrow>\r\n  </div>\r\n</Header> -->\r\n<!-- \r\n  # ============================================================================ #\r\n  #  Intro\r\n-->\r\n<!-- <Section>\r\n  <h2>Line Chart</h2>\r\n  <p style=\"padding-bottom: 1rem;\">\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit commodi\r\n    aperiam autem doloremque, sapiente est facere quidem praesentium expedita\r\n    rerum reprehenderit esse fuga, animi pariatur itaque ullam optio minima eum?\r\n  </p>\r\n</Section> -->\r\n\r\n<Divider />\r\n\r\n<!-- \r\n  # ============================================================================ #\r\n  #  Scrolly 1 ******************\r\n-->\r\n\r\n<Scroller {threshold} bind:id={id['chart']} splitscreen={true}>\r\n  <div slot=\"background\">\r\n    <figure>\r\n      <div class=\"col-wide height-full\">\r\n        <div class=\"chart\">\r\n          {#if data && id && yMin >= 0}\r\n            <LineChart\r\n              {data}\r\n              height={500}\r\n              xKey=\"year\"\r\n              area={false}\r\n              yKey=\"value\"\r\n              colors={colors_all}\r\n              {groups_all}\r\n              {groups_selected}\r\n              {step}\r\n              {yMin}\r\n              {yMax}\r\n              {xMax}\r\n              areaOpacity={0.3}\r\n              {animation}\r\n              zKey=\"group\"\r\n            />\r\n          {/if}\r\n        </div>\r\n      </div>\r\n    </figure>\r\n  </div>\r\n\r\n  <div slot=\"foreground\">\r\n    <section data-id=\"chart01\">\r\n      <div class=\"col-medium\">\r\n        <p>\r\n          Trend of the cost of <strong>some fruits</strong> over time.\r\n        </p>\r\n      </div>\r\n    </section>\r\n    <section data-id=\"chart02\">\r\n      <div class=\"col-medium\">\r\n        <p>\r\n          Let <strong>zoom in on y-axis</strong> range of interest to better visualize\r\n          the data.\r\n        </p>\r\n      </div>\r\n    </section>\r\n    <section data-id=\"chart03\">\r\n      <div class=\"col-medium\">\r\n        <p>\r\n          We can <strong>add data</strong> to introduce a new group.\r\n        </p>\r\n      </div>\r\n    </section>\r\n    <section data-id=\"chart04\">\r\n      <div class=\"col-medium\">\r\n        <p>\r\n          We can <strong>remove data</strong> to emphasize a narrative.\r\n        </p>\r\n      </div>\r\n    </section>\r\n    <section data-id=\"chart05\">\r\n      <div class=\"col-medium\">\r\n        <p>\r\n          We can also <strong>focus on certain ranges on the x-axis</strong> which\r\n          in this case is years.\r\n        </p>\r\n        <p>\r\n          Here between 1980 and 2000. THe price of grocery increase, both on\r\n          average and for flowers.\r\n        </p>\r\n      </div>\r\n    </section>\r\n    <section data-id=\"chart06\">\r\n      <div class=\"col-medium\">\r\n        <p>The trend of flowers changes after 2000 and starts to stagnate.</p>\r\n      </div>\r\n    </section>\r\n    <section data-id=\"chart07\">\r\n      <div class=\"col-medium\">\r\n        <p>In fact after 2010, flowers prices start dropping.</p>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</Scroller>\r\n\r\n<Divider />\r\n\r\n<!-- \r\n  # ============================================================================ #\r\n  #  Conclusion\r\n-->\r\n\r\n<Section>\r\n  <h2>Conclusions</h2>\r\n  <p>\r\n    Epsom Lorem ipsum dolor sit amet consectetur adipisicing elit. A magni\r\n    ducimus amet repellendus cupiditate? Ad optio saepe ducimus. At eveniet ad\r\n    delectus enim voluptatibus. Quaerat eligendi eaque corrupti possimus\r\n    molestiae?\r\n  </p>\r\n</Section>\r\n\r\n<!-- \r\n  # ============================================================================ #\r\n  #  Footer\r\n-->\r\n\r\n<UHCFooter />\r\n<div class=\"stickDev\">\r\n  step: {step}\r\n</div>\r\n\r\n<!-- \r\n  # ============================================================================ #\r\n  #  ............... style ...............\r\n-->\r\n<style>\r\n  /* Styles specific to elements within the demo */\r\n  :global(svelte-scroller-foreground) {\r\n    pointer-events: none !important;\r\n  }\r\n  :global(svelte-scroller-foreground section div) {\r\n    pointer-events: all !important;\r\n  }\r\n  select {\r\n    max-width: 350px;\r\n  }\r\n  .stickDev {\r\n    position: fixed;\r\n    bottom: 0;\r\n    right: 0;\r\n    background-color: white;\r\n    padding: 10px;\r\n  }\r\n  .chart {\r\n    margin-top: 45px;\r\n    width: calc(100% - 5px);\r\n  }\r\n  .chart-full {\r\n    margin: 0 20px;\r\n  }\r\n  .chart-sml {\r\n    font-size: 0.85em;\r\n  }\r\n  /* The properties below make the media DIVs grey, for visual purposes in demo */\r\n  .media {\r\n    background-color: #f0f0f0;\r\n    display: -webkit-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-box-direction: normal;\r\n    -ms-flex-flow: column;\r\n    flex-flow: column;\r\n    -webkit-box-pack: center;\r\n    -ms-flex-pack: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n    color: #aaa;\r\n  }\r\n</style>\r\n",
    "<script>\r\n\timport { themes } from '../config.js';\r\n\timport { getContext } from 'svelte';\r\n\r\n  export let theme = getContext('theme');\r\n  export let hr = true;\r\n</script>\r\n\r\n<section style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\r\n\t<div class=\"col-medium\">\r\n    {#if hr}\r\n    <hr style=\"color: {themes[theme]['muted']}\"/>\r\n    {:else}\r\n    <hr style=\"color: {themes[theme]['muted']}; border: none;\"/>\r\n    {/if}\r\n\t</div>\r\n</section>\r\n\r\n<style>\r\n  hr {\r\n    width: 75px;\r\n    border: none;\r\n    border-top: 2px solid;\r\n    margin: 40px auto -10px auto;\r\n  }\r\n</style>\r\n\r\n",
    "<script>\r\n\timport { themes } from '../config.js';\r\n\timport { getContext } from 'svelte';\r\n\r\n\texport let theme = getContext('theme');\r\n\texport let center = true;\r\n\texport let wide = false;\r\n\texport let short = false;\r\n</script>\r\n\r\n<style>\r\n\tsection {\r\n\t\tpadding: 36px 0;\r\n\t}\r\n\t.short {\r\n\t\tmin-height: 70vh;\r\n\t}\r\n</style>\r\n\r\n<section style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\r\n\t<div class=\"middle\" class:center class:col-medium={!wide} class:col-wide={wide} class:height-full={!short} class:short>\r\n\t\t<slot></slot>\r\n\t</div>\r\n</section>",
    "<script>\r\n  import { themes } from '../config.js';\r\n  import { getContext } from 'svelte';\r\n\r\n  export let theme = getContext('theme');\r\n  export let bgimage = null;\r\n  export let bgcolor = null;\r\n  export let bgfixed = false;\r\n  export let center = true;\r\n  export let short = false;\r\n\r\n  let style = '';\r\n\r\n  if (bgimage) {\r\n    style += `background-image: url(${bgimage});`;\r\n  } else {\r\n    style += 'background-image: none;';\r\n  }\r\n\r\n  if (bgfixed) {\r\n    style += ' background-attachment: fixed;';\r\n  }\r\n</script>\r\n\r\n<header\r\n  style=\"color: {themes[theme]['text']}; background-color: {bgcolor\r\n    ? bgcolor\r\n    : themes[theme]['background']}; {style}\"\r\n  class:short\r\n>\r\n  <div\r\n    class=\"v-padded col-wide middle\"\r\n    style=\"position: relative\"\r\n    class:short\r\n    class:height-full={!short}\r\n  >\r\n    <div class:center>\r\n      <slot />\r\n    </div>\r\n  </div>\r\n</header>\r\n\r\n<style>\r\n  .short {\r\n    min-height: 85vh;\r\n  }\r\n  .v-padded {\r\n    box-sizing: border-box;\r\n    padding: 80px 0;\r\n  }\r\n</style>\r\n",
    "<script>\r\n\timport { themes } from \"../config.js\";\r\n\timport { onMount, getContext } from \"svelte\";\r\n\timport { debounce } from \"debounce\";\r\n\r\n\tconst colWidths = {\r\n\t\tnarrow: 200,\r\n\t\tmedium: 300,\r\n\t\twide: 500,\r\n\t};\r\n\r\n\texport let theme = getContext(\"theme\");\r\n\texport let col = \"medium\";\r\n\texport let grid = null;\r\n\texport let caption = null;\r\n\texport let height = 200;\r\n\texport let gap = 12;\r\n\r\n\tlet gridClass = grid ? ` grid-${grid}` : '';\r\n\r\n\tlet nogrid = !(\"grid-gap\" in document.body.style);\r\n\t\r\n\tlet rowHeight = !Number.isNaN(height) ? height + \"px\" : height;\r\n\r\n\tlet gridGap = !Number.isNaN(gap) ? gap + \"px\" : gap;\r\n\r\n\t// The code below this point mimics CSS Grid functionality in IE 11\r\n\tconst minWidth = grid && colWidths[grid] ? colWidths[grid] : null;\r\n\r\n\tlet gridWidth;\r\n\tlet cols;\r\n\r\n\tlet el;\r\n\tlet divs;\r\n\tlet count;\r\n\r\n\tif (nogrid) {\r\n\t\tonMount(() => {\r\n\t\t\tresize();\r\n\t\t});\r\n\t}\r\n\r\n\tconst update = debounce(resize, 200);\r\n\r\n\tfunction resize() {\r\n\t\tif (el && !divs) {\r\n\t\t\tlet arr = [];\r\n\t\t\tlet children = el.childNodes;\r\n\t\t\tchildren.forEach((child) => {\r\n\t\t\t\tif (child.nodeName == \"DIV\") {\r\n\t\t\t\t\tarr.push(child);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tdivs = arr;\r\n\t\t}\r\n\t\tcount = divs.length;\r\n\t\tcols = !minWidth || gridWidth <= minWidth ? 1 : Math.floor(gridWidth / minWidth);\r\n\t\tmakeCols();\r\n\t}\r\n\r\n\tfunction makeCols() {\r\n\t\tlet r =\r\n\t\t\tMath.ceil(count / cols) > 1\r\n\t\t\t\t? `-ms-grid-rows: 1fr (${gap}px 1fr)[${\r\n\t\t\t\t\t\tMath.ceil(count / cols) - 1\r\n\t\t\t\t  }]; grid-template-rows: 1fr repeat(${\r\n\t\t\t\t\t\tMath.ceil(count / cols) - 1\r\n\t\t\t\t  }, ${gap}px 1fr);`\r\n\t\t\t\t: `-ms-grid-rows: 1fr; grid-template-rows: 1fr;`;\r\n\t\tlet c =\r\n\t\t\tcols > 1\r\n\t\t\t\t? `-ms-grid-columns: 1fr (${gap}px 1fr)[${\r\n\t\t\t\t\t\tcols - 1\r\n\t\t\t\t  }]; grid-template-columns: 1fr repeat(${cols - 1}, ${gap}px 1fr);`\r\n\t\t\t\t: \"\";\r\n\t\tel.style.cssText = r + c;\r\n\t\tdivs.forEach((div, i) => {\r\n\t\t\tlet col = (i % cols) * 2 + 1;\r\n\t\t\tlet row = Math.floor(i / cols) * 2 + 1;\r\n\t\t\tdiv.style.cssText = `-ms-grid-column: ${col}; -ms-grid-row: ${row}; grid-column: ${col}; grid-row: ${row}; min-height: ${rowHeight};`;\r\n\t\t});\r\n\t}\r\n\r\n\t$: nogrid && (minWidth || gridWidth) && update();\r\n</script>\r\n\r\n{#if nogrid}\r\n<figure style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\r\n\t<div class=\"col-{col}\">\r\n\t\t<div bind:this={el} bind:clientWidth={gridWidth} class=\"grid-ms\">\r\n\t\t\t<slot></slot>\r\n\t\t</div>\r\n\t</div>\r\n</figure>\r\n{:else}\r\n<figure style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\r\n\t<div class=\"col-{col}\">\r\n\t\t<div class=\"grid{gridClass}\" style=\"grid-gap: {gridGap}; min-height: {rowHeight}\">\r\n\t\t\t<slot></slot>\r\n\t\t</div>\r\n  </div>\r\n</figure>\r\n{/if}\r\n{#if caption}\r\n\t<caption style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\r\n\t\t<div class=\"col-medium\">\r\n\t\t\t<div class=\"caption\">{@html caption}</div>\r\n\t\t</div>\r\n\t</caption>\r\n{/if}\r\n\r\n<style>\r\n\t.grid-ms {\r\n\t\tdisplay: grid;\r\n\t\tdisplay: -ms-grid;\r\n\t\t-ms-grid-columns: 1fr;\r\n\t\tgrid-template-columns: 1fr;\r\n\t\tmargin-top: 40px;\r\n\t}\r\n\t.grid {\r\n\t\tdisplay: -ms-grid;\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: repeat(auto-fill, 100%);\r\n\t\tmargin: 40px 0 0 0;\r\n\t}\r\n\t.grid-narrow {\r\n\t\tgrid-template-columns: repeat(auto-fill, minmax(200px, 1fr)) !important;\r\n\t}\r\n\t.grid-medium {\r\n\t\tgrid-template-columns: repeat(auto-fill, minmax(300px, 1fr)) !important;\r\n\t}\r\n\t.grid-wide {\r\n\t\tgrid-template-columns: repeat(auto-fill, minmax(500px, 1fr)) !important;\r\n\t}\r\n\t:global(.grid > div) {\r\n\t\tmin-height: inherit;\r\n\t}\r\n</style>\r\n",
    "<script context=\"module\">\r\n  // Based on svelte-scroller by Rich Harris\r\n  // https://github.com/sveltejs/svelte-scroller\r\n  // Patched to transpile to IE 11 and allow for split-screen view option\r\n\r\n\tconst handlers = [];\r\n\tlet manager;\r\n\r\n\tif (typeof window !== 'undefined') {\r\n\t\tconst run_all = () => handlers.forEach(fn => fn());\r\n\r\n\t\twindow.addEventListener('scroll', run_all);\r\n\t\twindow.addEventListener('resize', run_all);\r\n\t}\r\n\r\n\tif (typeof IntersectionObserver !== 'undefined') {\r\n\t\tconst map = new Map();\r\n\r\n\t\tconst observer = new IntersectionObserver((entries, observer) => {\r\n\t\t\tentries.forEach(entry => {\r\n\t\t\t\tconst update = map.get(entry.target);\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\r\n\t\t\t\tif (entry.isIntersecting) {\r\n\t\t\t\t\tif (index === -1) handlers.push(update);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tupdate();\r\n\t\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}, {\r\n\t\t\trootMargin: '400px 0px' // TODO why 400?\r\n\t\t});\r\n\r\n\t\tmanager = {\r\n\t\t\tadd: ({ outer, update }) => {\r\n\t\t\t\tconst { top, bottom } = outer.getBoundingClientRect();\r\n\r\n\t\t\t\tif (top < window.innerHeight && bottom > 0) handlers.push(update);\r\n\r\n\t\t\t\tmap.set(outer, update);\r\n\t\t\t\tobserver.observe(outer);\r\n\t\t\t},\r\n\r\n\t\t\tremove: ({ outer, update }) => {\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\r\n\t\t\t\tmap.delete(outer);\r\n\t\t\t\tobserver.unobserve(outer);\r\n\t\t\t}\r\n\t\t};\r\n\t} else {\r\n\t\tmanager = {\r\n\t\t\tadd: ({ update }) => {\r\n\t\t\t\thandlers.push(update);\r\n\t\t\t},\r\n\r\n\t\t\tremove: ({ update }) => {\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n</script>\r\n\r\n<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\t// config\r\n\texport let top = 0;\r\n\texport let bottom = 1;\r\n\texport let threshold = 0.5;\r\n\texport let query = 'section';\r\n\texport let parallax = false;\r\n\r\n\t// bindings\r\n\texport let index = 0;\r\n\texport let count = 0;\r\n\texport let offset = 0;\r\n\texport let progress = 0;\r\n\texport let visible = false;\r\n\texport let splitscreen = false; // Add class to allow for split screen option\r\n\texport let id = null;\r\n\r\n\tlet outer;\r\n  let bgContainer; // IE patch. Container binding to update inline style\r\n\tlet foreground;\r\n\tlet background;\r\n\tlet left;\r\n\tlet sections;\r\n\tlet wh = 0;\r\n\tlet fixed;\r\n\tlet offset_top;\r\n\tlet width = 1;\r\n\tlet height;\r\n\tlet inverted;\r\n\r\n\t$: top_px = Math.round(top * wh);\r\n\t$: bottom_px = Math.round(bottom * wh);\r\n\t$: threshold_px = Math.round(threshold * wh);\r\n\r\n\t$: (top, bottom, threshold, parallax, update());\r\n\r\n\tonMount(() => {\r\n\t\tsections = foreground.querySelectorAll(query);\r\n\t\tcount = sections.length;\r\n\r\n\t\tupdate();\r\n\r\n\t\tconst scroller = { outer, update };\r\n\r\n\t\tmanager.add(scroller);\r\n\t\treturn () => manager.remove(scroller);\r\n\t});\r\n\r\n\t// IE patch. BG container style (fixed/unfixed) set via function\r\n  function setFixed() {\r\n    if (bgContainer) {\r\n      let style = `position: ${fixed ? 'fixed' : 'absolute'}; top: 0; transform: translate(0, ${offset_top}px); width: ${width}px; z-index: ${inverted ? 3 : 1};`;\r\n      bgContainer.style.cssText = style;\r\n    }\r\n  }\r\n\r\n\tfunction update() {\r\n\t\tif (!foreground) return;\r\n\r\n\t\t// re-measure outer container\r\n\t\tconst bcr = outer.getBoundingClientRect();\r\n\t\tleft = bcr.left;\r\n\t\twidth = bcr.right - bcr.left;\r\n\r\n\t\t// determine fix state\r\n\t\tconst fg = foreground.getBoundingClientRect();\r\n\t\tconst bg = background.getBoundingClientRect();\r\n\r\n\t\tvisible = fg.top < wh && fg.bottom > 0;\r\n\r\n\t\tconst foreground_height = fg.bottom - fg.top;\r\n\t\tconst background_height = bg.bottom - bg.top;\r\n\r\n\t\tconst available_space = bottom_px - top_px;\r\n\t\tprogress = (top_px - fg.top) / (foreground_height - available_space);\r\n\r\n\t\tif (progress <= 0) {\r\n\t\t\toffset_top = 0;\r\n      if (fixed) {\r\n        fixed = false;\r\n        setFixed();\r\n      } // Non-IE specific patch to avoid setting style repeatedly\r\n\t\t} else if (progress >= 1) {\r\n\t\t\toffset_top = parallax\r\n\t\t\t\t? (foreground_height - background_height)\r\n\t\t\t\t: (foreground_height - available_space);\r\n      if (fixed) {\r\n        fixed = false;\r\n        setFixed();\r\n      }\r\n\t\t} else {\r\n\t\t\toffset_top = parallax ?\r\n\t\t\t\tMath.round(top_px - progress * (background_height - available_space)) :\r\n\t\t\t\ttop_px;\r\n      if (!fixed) {\r\n        fixed = true;\r\n        setFixed();\r\n      }\r\n\t\t}\r\n\r\n\t\tfor (index = 0; index < sections.length; index += 1) {\r\n\t\t\tconst section = sections[index];\r\n\t\t\tconst { top } = section.getBoundingClientRect();\r\n\r\n\t\t\tconst next = sections[index + 1];\r\n\t\t\tconst bottom = next ? next.getBoundingClientRect().top : fg.bottom;\r\n\r\n\t\t\toffset = (threshold_px - top) / (bottom - top);\r\n\t\t\tid = section.dataset.id ? section.dataset.id : null;\r\n\t\t\tif (bottom >= threshold_px) break;\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<svelte:window bind:innerHeight={wh}/>\r\n\r\n<svelte-scroller-outer bind:this={outer} class:splitscreen>\r\n\t<svelte-scroller-background-container class='background-container' bind:this={bgContainer}>\r\n\t\t<svelte-scroller-background bind:this={background}>\r\n\t\t\t<slot name=\"background\"></slot>\r\n\t\t</svelte-scroller-background>\r\n\t</svelte-scroller-background-container>\r\n\r\n\t<svelte-scroller-foreground bind:this={foreground}>\r\n\t\t<slot name=\"foreground\"></slot>\r\n\t</svelte-scroller-foreground>\r\n</svelte-scroller-outer>\r\n\r\n<style>\r\n\tsvelte-scroller-outer {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\tsvelte-scroller-background {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\tsvelte-scroller-foreground {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\tz-index: 2;\r\n\t}\r\n\r\n\tsvelte-scroller-foreground::after {\r\n\t\tcontent: ' ';\r\n\t\tdisplay: block;\r\n\t\tclear: both;\r\n\t}\r\n\r\n\tsvelte-scroller-background-container {\r\n\t\tdisplay: block;\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\tmax-width: 100%;\r\n\t\tpointer-events: none;\r\n\t\t/* height: 100%; */\r\n\r\n\t\t/* in theory this helps prevent jumping */\r\n\t\twill-change: transform;\r\n\t\t/* -webkit-transform: translate3d(0, 0, 0);\r\n\t\t-moz-transform: translate3d(0, 0, 0);\r\n\t\ttransform: translate3d(0, 0, 0); */\r\n\t}\r\n</style>",
    "<script>\r\n  import { themes } from '../config.js';\r\n  import { getContext } from 'svelte';\r\n  import Icon from '@iconify/svelte';\r\n  export let theme = getContext('theme');\r\n</script>\r\n\r\n<footer\r\n  style=\"color: {themes[theme]['text']}; background-color: {themes[theme][\r\n    'pale'\r\n  ]};\"\r\n>\r\n  <div class=\"col-wide\" data-analytics=\"footer\">\r\n    <div class=\"container\">\r\n      <div class=\"item\">\r\n        <a href=\"https://drexel.edu/uhc/\">\r\n          <div id=\"svg-container\">\r\n            <img\r\n              id=\"my-svg\"\r\n              src=\"./img/uhc-primary-blue_black.svg\"\r\n              alt=\"Drexel Urban Health Collaborative\"\r\n            />\r\n          </div>\r\n        </a>\r\n        <div class=\"link-tree\">\r\n          <ul>\r\n            <li>\r\n              <a\r\n                href=\"https://drexel.edu/uhc/about/contact/\"\r\n                class=\"link\"\r\n                style=\"color: {themes[theme]['text']}\">Contact us</a\r\n              >\r\n            </li>\r\n\r\n            <li>\r\n              <a\r\n                href=\"https://drexel.edu/privacy\"\r\n                class=\"link\"\r\n                style=\"color: {themes[theme]['text']}\">Privacy and legal</a\r\n              >\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div class=\"item\" id=\"follow-uhc\">\r\n        Follow UHC:\r\n        <div class=\"container\">\r\n          <a href=\"https://github.com/Drexel-UHC\">\r\n            <div class=\"social-icon\"><Icon icon=\"mdi:github\" /></div>\r\n          </a>\r\n          <a href=\"https://www.facebook.com/DrexelUHC/\">\r\n            <div class=\"social-icon\"><Icon icon=\"il:facebook\" /></div>\r\n          </a>\r\n          <a href=\"https://twitter.com/drexeluhc\">\r\n            <div class=\"social-icon\"><Icon icon=\"mdi:twitter\" /></div>\r\n          </a>\r\n          <a href=\"https://www.instagram.com/drexeluhc\">\r\n            <div class=\"social-icon\"><Icon icon=\"mdi:instagram\" /></div>\r\n          </a>\r\n          <a href=\"https://www.youtube.com/@urbanhealthcollaborative8928\">\r\n            <div class=\"social-icon\"><Icon icon=\"mdi:youtube\" /></div>\r\n          </a>\r\n          <a\r\n            href=\"https://www.linkedin.com/company/drexel-urban-health-collaborative/\"\r\n          >\r\n            <div class=\"social-icon\"><Icon icon=\"mdi:linkedin\" /></div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <hr style=\"border-top-color: {themes[theme]['muted']}\" />\r\n    <div class=\"license\">\r\n      This template was forked and modified from the <a\r\n        href=\"https://github.com/ONSvisual/svelte-scrolly\"\r\n        class=\"link\"\r\n        target=\"_blank\"\r\n        rel=\"noopener\"\r\n        style=\"color: {themes[theme]['text']}\"\r\n        >UK Office of National Statistics</a\r\n      >. All content is available under the\r\n      <a\r\n        href=\"https://opensource.org/licenses/MIT\"\r\n        class=\"link\"\r\n        target=\"_blank\"\r\n        rel=\"noopener\"\r\n        style=\"color: {themes[theme]['text']}\">MIT License</a\r\n      >, except where otherwise stated\r\n    </div>\r\n  </div>\r\n</footer>\r\n\r\n<style>\r\n  .container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n  }\r\n  #follow-uhc {\r\n    min-width: 200px;\r\n  }\r\n  .item {\r\n  }\r\n  .social-icon {\r\n    font-size: 1.5rem;\r\n  }\r\n  footer {\r\n    padding-bottom: 72px;\r\n    padding-top: 36px;\r\n    font-size: 18px;\r\n  }\r\n  #svg-container {\r\n    width: 200px; /* Set the desired width of the container */\r\n    height: 80px; /* Set the desired height of the container */\r\n  }\r\n  .link-tree {\r\n    margin-top: 27px;\r\n  }\r\n  footer a.link {\r\n    -webkit-box-sizing: border-box;\r\n    box-sizing: border-box;\r\n    text-decoration: underline;\r\n    display: inline-block;\r\n  }\r\n  footer a.link:hover {\r\n    text-decoration: none;\r\n  }\r\n  footer a.link:active {\r\n    outline: 3px solid transparent;\r\n    background-color: #fd0;\r\n    -webkit-box-shadow: 0 -2px #fd0, 0 4px #222;\r\n    box-shadow: 0 -2px #fd0, 0 4px #222;\r\n    color: #222;\r\n    text-decoration: none;\r\n  }\r\n  footer hr {\r\n    margin-bottom: 27px;\r\n    margin-top: 36px;\r\n    border: none;\r\n    border-top: 1px solid #777;\r\n  }\r\n  ul {\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n  li {\r\n    margin-right: 18px;\r\n    display: inline-block;\r\n  }\r\n  .logo-img {\r\n    margin-bottom: 27px;\r\n  }\r\n  .ogl-img {\r\n    margin: 0 0.5rem 0.2rem 0;\r\n    width: 59px;\r\n    height: 24px;\r\n    vertical-align: middle;\r\n  }\r\n  .license {\r\n    vertical-align: top;\r\n  }\r\n  a img:hover {\r\n    cursor: pointer;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import { themes } from '../config.js';\r\n  import { getContext } from 'svelte';\r\n\r\n  export let theme = getContext('theme');\r\n  export let filled = false;\r\n  export let center = true;\r\n</script>\r\n\r\n<nav\r\n  style=\"border-bottom-color: {themes[theme]['muted']}; {filled\r\n    ? 'background-color: ' + themes[theme]['background'] + ';'\r\n    : ''}\"\r\n>\r\n  <div class=\"col-wide middle\" class:center>\r\n    <a href=\"https://drexel.edu/uhc/\">\r\n      <div id=\"svg-container\">\r\n        <img\r\n          id=\"my-svg\"\r\n          src=\"./img/uhc-primary-blue_black.svg\"\r\n          alt=\"Drexel Urban Health Collaborative\"\r\n        />\r\n      </div>\r\n    </a>\r\n  </div>\r\n</nav>\r\n\r\n<style>\r\n  #svg-container {\r\n    width: 200px; /* Set the desired width of the container */\r\n    height: 80px; /* Set the desired height of the container */\r\n  }\r\n\r\n  #my-svg {\r\n    width: 100%; /* Make the SVG width fill the container */\r\n    height: 100%; /* Make the SVG height fill the container */\r\n    object-fit: contain; /* Adjust the object-fit property as per your needs */\r\n  }\r\n\r\n  nav {\r\n    -webkit-box-sizing: border-box;\r\n    box-sizing: border-box;\r\n    position: relative;\r\n    height: 100px;\r\n    margin-bottom: -80px;\r\n    border-bottom: 1px solid #777;\r\n    z-index: 1;\r\n  }\r\n  a img:hover {\r\n    cursor: pointer;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  export let color = \"black\";\r\n  export let animation = true;\r\n\texport let center = true;\r\n\r\n  const colors = [\"black\", \"white\"];\r\n\r\n  color = colors.includes(color) ? color : \"black\";\r\n</script>\r\n\r\n{#if center}\r\n<slot></slot><br/>\r\n<img src=\"./img/scroll-down-{color}.svg\" class=\"arrow\" class:bounce={animation} alt=\"\" aria-hidden=\"true\"/>\r\n{:else}\r\n<img src=\"./img/scroll-down-{color}.svg\" class=\"arrow left\" class:bounce={animation} alt=\"\" aria-hidden=\"true\"/><slot></slot>\r\n{/if}\r\n\r\n<style>\r\n\t.arrow {\r\n\t\twidth: 48px;\r\n\t\theight: 48px;\r\n\t}\r\n\t.left {\r\n\t\tmargin-right: 10px;\r\n\t}\r\n\t.bounce {\r\n\t\t-webkit-animation-duration: 2s;\r\n\t\t        animation-duration: 2s;\r\n\t\t-webkit-animation-iteration-count: infinite;\r\n\t\t        animation-iteration-count: infinite;\r\n\t\t-webkit-animation-name: bounce;\r\n\t\t        animation-name: bounce;\r\n\t\t-webkit-animation-timing-function: ease;\r\n\t\t        animation-timing-function: ease;\r\n\t}\r\n\t@-webkit-keyframes bounce {\r\n\t\t0%   { -webkit-transform: translateY(10px); transform: translateY(10px); }\r\n\t\t30%  { -webkit-transform: translateY(-10px); transform: translateY(-10px); }\r\n\t\t50%  { -webkit-transform: translateY(10px); transform: translateY(10px); }\r\n\t\t100% { -webkit-transform: translateY(10px); transform: translateY(10px); }\r\n\t}\r\n\t@keyframes bounce {\r\n\t\t0%   { -webkit-transform: translateY(10px); transform: translateY(10px); }\r\n\t\t30%  { -webkit-transform: translateY(-10px); transform: translateY(-10px); }\r\n\t\t50%  { -webkit-transform: translateY(10px); transform: translateY(10px); }\r\n\t\t100% { -webkit-transform: translateY(10px); transform: translateY(10px); }\r\n\t}\r\n</style>",
    "<script>\r\n  export let id = \"switch\";\r\n  export let label = \"Label\";\r\n  export let mono = false;\r\n  export let checked;\r\n</script>\r\n\r\n<div class=\"switch\">\r\n  <input bind:checked {id} type=\"checkbox\" class=\"switch-input\" tabindex=\"0\" />\r\n  <label for={id} class=\"switch-label\" class:mono>{label}</label>\r\n</div>\r\n\r\n<style>\r\n  .switch {\r\n    position: relative;\r\n    display: inline-block;\r\n  }\r\n  .switch-input {\r\n    position: absolute;\r\n    width: 1px;\r\n    height: 1px;\r\n    margin: -1px;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    clip: rect(0, 0, 0, 0);\r\n    border: 0;\r\n  }\r\n  .switch-label::before,\r\n  .switch-label::after {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    cursor: pointer;\r\n  }\r\n  .switch-label {\r\n    display: block;\r\n    cursor: pointer;\r\n    margin-top: -4px;\r\n    margin-left: 58px;\r\n  }\r\n  .switch-label::before {\r\n    -webkit-box-sizing: border-box;\r\n    box-sizing: border-box;\r\n    top: 0;\r\n    left: 0;\r\n    width: 48px;\r\n    height: 24px;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n    background-color: #aaa;\r\n    border-radius: 9999em;\r\n    -webkit-transition: background-color 0.25s ease;\r\n    -o-transition: background-color 0.25s ease;\r\n    transition: background-color 0.25s ease;\r\n  }\r\n  .switch-label::after {\r\n    top: 3px;\r\n    left: 3px;\r\n    width: 18px;\r\n    height: 18px;\r\n    border-radius: 50%;\r\n    background-color: #fff;\r\n    -webkit-transition: left 0.25s ease;\r\n    -o-transition: left 0.25s ease;\r\n    transition: left 0.25s ease;\r\n  }\r\n  .switch-input:checked + .switch-label::before {\r\n    background-color: rgb(32, 96, 149);\r\n  }\r\n  .switch-input:checked + .switch-label::after {\r\n    left: 27px;\r\n    top: 3px;\r\n  }\r\n\r\n  .mono::before {\r\n    border: 2px solid white;\r\n    background: none !important;\r\n  }\r\n</style>"
  ],
  "names": [],
  "mappings": "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"
}